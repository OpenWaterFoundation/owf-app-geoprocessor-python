import geoprocessor.util.io_util as io_util
import geoprocessor.util.command_util as command_util
import geoprocessor.ui.util.qt_util as qt_util
from geoprocessor.ui.commands.layers.ReadGeoLayerFromGeoJSON_Editor import UiDialog as ReadGeoLayerFromGeoJSON_Editor
from PyQt5 import QtCore, QtGui, QtWidgets
import functools
import logging
import os
import webbrowser
import geoprocessor.ui.util.config as config

# The following code is generated by QT Designer and returns a QString from UTF-8 string.
try:
    # _fromUtf8 = QtCore.QString.fromUtf8
    _fromUtf8 = lambda s: s
except AttributeError:
    def _fromUtf8(s):
        return s

# The following code is generated by QT Designer and does what?
try:
    _encoding = QtWidgets.QApplication.UnicodeUTF8

    def _translate(context, text, disambig):
        return QtWidgets.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtWidgets.QApplication.translate(context, text, disambig)


class GeoProcessorUI(QtWidgets.QMainWindow):  # , Ui_MainWindow):
    """
    Main GeoProcessor UI class, which instantiates a main application window that the user interacts with.
    This class is a child of the core Qt window classes.
    """

    def __init__(self, geoprocessor, runtime_properties, app_session):
        # Old way was to initialize generically
        # super().__init__()

        # This is a session object to keep track of session variables such as command file history
        self.app_session = app_session

        # New way is to inherit from Qt main window
        QtWidgets.QMainWindow.__init__(self)
        print('Inside GeoProcessorUI constructor, calling setupUi')
        # Call the setupUi function to instantiate UI components
        # - This is code that was originally auto-generated by QT Designer
        self.setup_ui()

        # The GeoProcessor object from calling code (main app) will be used for processing.
        self.gp = geoprocessor

        # Save runtime properties
        # - Initially the AppVersion and AppVersionDate, for use in Help About
        self.runtime_properties = runtime_properties

        # Latest command file that was read or saved, parent folder is the working directory
        self.command_file_path = None

        # The most recent file save location, used to help file dialog start with recent location
        # - could be command file or other files
        self.saved_file = None

        # The URL to the user documentation main page
        self.user_doc_url = config.user_doc_url

        # All event handlers and connections are configured in the setup_ui*() functions grouped by component.

    # TODO smalers 2018-07-24 need to review this function
    def clear_command_from_rightclick(self):
        """
        Clear the right-clicked command from the Command List widget.

        Returns: None
        """

        # Open a message box to confirm with the user that they want to delete the command.
        response = qt_util.new_message_box(
            QtWidgets.QMessageBox.Question,
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            "Do you want to delete this command?",
            "Clear Commands")

        # If the user confirms that they want to delete the command, continue. Otherwise, pass.
        if response == QtWidgets.QMessageBox.Yes:
            # Get the index of the right-clicked command (item) and remove it from the Command_List widget.
            index_of_item_to_remove = self.commands_List.currentRow()
            self.commands_List.takeItem(index_of_item_to_remove)

        # Update the command count and Command_List label to show that commands were deleted.
        self.update_ui_status_commands()

    # TODO smalers 2018-07-24 need to review this function
    def edit_command_editor(self):
        """
        Opens a dialog box that allows users to edit existing commands.

        Returns: None
        """

        # Get the command line string of the right-clicked item in the commands_List widget.
        cmd_line_string = self.commands_List.currentItem().text()

        # Get the command name of the command line string. All text before the first open parenthesis.
        command_name = command_util.parse_command_name_from_command_string(cmd_line_string)

        # Get the parameter string of the command line string. All text inside parenthesis.
        parameter_string = command_util.parse_parameter_string_from_command_string(cmd_line_string)

        # Convert the parameter string into a list of key value pairs. [ParameterName1=ParameterValue1, ... ]
        parameter_key_values = command_util.parse_parameter_string_into_key_value_pairs(parameter_string)

        # Convert hte list of key value pairs into a parameter dictionary. {ParameterName1: ParameterValue1}
        input_parameter_dictionary = command_util.parse_key_value_pairs_into_dictionary(parameter_key_values)

        # Create a QDialog window instance.
        d = QtWidgets.QDialog()

        # Create the dialog design instance for the specific input command.
        ui = self.new_command_obj(command_name)

        # If there are not parameters, set the input_parameter_dictionary to the command_parameter_values.
        if not input_parameter_dictionary:
            input_parameter_dictionary = ui.command_parameter_values

        # Apply the command-specific dialog design to the QDialog window.
        ui.setupUi(d)

        # Update the dialog window with the parameter values included in the cmd_line_string.
        # Iterate over the dictionary entries of the input_parameter_dictionary.
        # Each entry represents a parameter.
        # Key: parameter name
        # Value: existing parameter value
        for input_parameter_name, input_parameter_value in input_parameter_dictionary.items():

            # Iterate over the dictionary entries of the default command_parameter_dictionary within the dialog design
            # instance object.
            # Each entry represents a parameter.
            # Key: parameter name
            # Value: default parameter value
            for default_parameter_name, default_parameter_value in ui.command_parameter_values.items():

                # If a command parameter is NOT set to default in the cmd_line_string, set the
                # parameter value within the dialog design instance object to the parameter value indicated by the
                # cmd_line_string.
                if input_parameter_name == default_parameter_name:
                    ui.command_parameter_values[default_parameter_name] = input_parameter_value

        # Update the dialog window with the parameter values from the command line string.
        ui.refresh()

        # If the "OK" button is clicked within the dialog window, continue.
        # Else, if the "Cancel" button is clicked, do nothing.
        if d.exec_():
            # Get the index of the selected command (item).
            index = self.commands_List.currentRow()

            # Remove the original command (item) from the Command_List widget.
            self.commands_List.takeItem(index)

            # Get the updated command string from the dialog window.
            command_string = ui.CommandDisplay_View_TextBrowser.toPlainText()

            # Add the command string to the Command_List widget in the same location as the previous command item.
            self.commands_List.insertItem(index, command_string)

            # Update the command count and Command_List label to show that a command was added to the workflow.
            self.update_ui_status_commands()

    # TODO smalers 2018-07-24 need to review this function
    def new_command_editor(self, command_name):
        """
        Opens the dialog window for the selected command. If the users clicks "OK" within the dialog window, the
        command string (with the desired parameter values) is added to the Command_List widget within the Main Window
        user interface. Other UI components are also updated - including the total and selected command count, the
        Command_List Widget Label, and the GeoProcessor's list of commands.

        Args:
            command_name (str): the name of the command

        Returns: None
        """

        # Create a QDialog window instance.
        d = QtWidgets.QDialog()

        # Create the dialog design instance for the specific input command.
        ui = self.new_command_obj(command_name)

        # Apply the command-specific dialog design to the QDialog window.
        ui.setupUi(d)

        # If the "OK" button is clicked within the dialog window, continue.
        # Else, if the "Cancel" button is clicked, do nothing.
        if d.exec_():

            # Check if all of the required parameters are filled. If so, add the command to the Command_List widget.
            if ui.are_required_parameters_specified(ui.ui_commandparameters):

                # Get the command string from the dialog window.
                command_string = ui.CommandDisplay_View_TextBrowser.toPlainText()

                # Add the command string to the Command_List widget.
                self.commands_List.addItem(command_string)

                # Update the command count and Command_List label to show that a command was added to the workflow.
                self.update_ui_status_commands()

            else:

                # Display a message box to inform user that a required parameter is missing.
                value = qt_util.new_message_box(
                    QtWidgets.QMessageBox.Critical,
                    QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                    "One or more of the required parameters is not filled out. "
                    "Return to the dialog box?", "Required parameter(s) not met.")

                # If the user decides to return to the dialog box, display the dialog box with the original values.
                if value == QtWidgets.QMessageBox.Yes:
                    # TODO need to figure out how to go back to the original dialog box.
                    pass

                # Delete the original dialog box and return to the main window.
                else:
                    pass

    @classmethod
    def new_command_obj(cls, command_name):
        if command_name.upper() == "READGEOLAYERFROMGEOJSON":
            return ReadGeoLayerFromGeoJSON_Editor()
        else:
            return None

    def processor_run_commands(self, run_selected=False):
        """
        Runs the commands from the Command_List widget within the GeoProcessor.

        Args:
            run_selected:
                Boolean. If FALSE, all commands within Command_List widget are processed. If TRUE, only selected
                commands within Command_List widget are processed.

        Returns:
            None
        """
        # If ALL of the commands should be run, continue.
        if run_selected:
            # Update the GeoProcessor's list of commands to include only the SELECTED commands in the Command_List
            # widget.
            self.processor_update_commands_from_command_list(run_selected=True)
        else:
            # Update the GeoProcessor's list of commands to include ALL of the commands in the Command_List widget.
            self.processor_update_commands_from_command_list()

        # Runs the geoprocessor's processor_run_commands function to run the existing commands
        # that exist in the processor.
        print("Running commands in processor...")
        self.gp.run_commands()
        print("...back from processor running commands.")

        # After commands have been run, update the UI Results section to reflect the output & intermediary products.
        print("Showing processing results.")
        self.show_results()

    def processor_update_commands_from_command_list(self, run_selected=False):
        """
        Update the GeoProcessor's command list with the existing command strings in the Command_List widget.

        Returns: None
        """
        # An empty list. Will hold the command strings. One item for each existing command within the Command_List
        # widget.
        cmd_string_list = []

        # If the GeoProcessor should be updated with ALL commands, continue.
        if run_selected:
            # Iterate over the SELECTED items in the Command_List widget.
            print("Setting selected " + str(len(self.commands_List.selectedItems())) + " commands in processor...")
            for item in list(self.commands_List.selectedItems()):
                # Add the item's text (the command string) to the cmd_string_list.
                cmd_string_list.append(item.text())
        else:
            # Iterate over ALL of the items in the Command_List widget.
            print("Setting all " + str(self.commands_List.count()) + " commands in processor...")
            for i in range(self.commands_List.count()):
                # Add the item's text (the command string) to the cmd_string_list.
                cmd_string_list.append(self.commands_List.item(i).text())

        # Read the command strings into GeoProcessor command objects. Pass the objects to the GeoProcessor.
        # - Also pass the working directory corresponding to the folder that command file was read from.
        runtime_properties = {}
        if self.command_file_path is not None:
            # Tell the processor the working directory
            # - this is used to convert to/from relative paths and is also used by RunCommands
            runtime_properties['WorkingDir'] = os.path.dirname(self.command_file_path)
            runtime_properties['InitialWorkingDir'] = os.path.dirname(self.command_file_path)
        self.gp.read_commands_from_command_list(cmd_string_list, runtime_properties)

    def setup_ui(self):
        """
        Set up the user interface.
        This code was included from GeoProcessor_Design.py, which was generated by QT Designer by converting
        its '.ui' file to '.py'.
        However, subsequent customization has edited this code directly without reprocessing the '.ui' file,
        and this will continue into the future.

        Returns:  None
        """
        print("Entering setupUi")
        main_window = self  # The main window, in this case self
        # Main window that will contain all other components
        main_window.setObjectName(_fromUtf8("MainWindow"))
        main_window.setWindowTitle("GeoProcessor")
        main_window.resize(1038, 834)
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("MS Shell Dlg 2"))
        main_window.setFont(font)
        main_window.setWindowOpacity(1.0)

        # Central widget is the place where the main content is placed
        # - See http://doc.qt.io/qt-5/qmainwindow.html
        # - Use 6 columns for grid layout
        main_window.centralwidget = QtWidgets.QWidget(main_window)
        main_window.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        main_window.centralwidget_GridLayout = QtWidgets.QGridLayout(self.centralwidget)
        main_window.centralwidget_GridLayout.setObjectName(_fromUtf8("centralwidget_GridLayout"))

        # Row position within central widget grid layout
        # - will be incremented by one before adding a component so first use will set to zero
        y_centralwidget = -1

        # Set up the Catalog area
        #y_centralwidget = y_centralwidget + 1
        #self.setup_ui_catalog(y_centralwidget)

        # Set up the Commands area
        y_centralwidget = y_centralwidget + 1
        self.setup_ui_commands(y_centralwidget)

        # Setup the Results components
        y_centralwidget = y_centralwidget + 1
        self.setup_ui_results(y_centralwidget)

        # Setup the Status components
        y_centralwidget = y_centralwidget + 1
        self.setup_ui_status(main_window, y_centralwidget)

        # Now set the central widget, which will have been populated with the above components
        main_window.setCentralWidget(self.centralwidget)

        # Setup the Menu components
        self.setup_ui_menus(main_window)

        # Triggering the exit event on the main window closes the window.
        self.Menu_File_Exit.triggered.connect(main_window.close)
        # QtCore.QObject.connect(self.Menu_File_Exit, QtCore.SIGNAL(_fromUtf8("triggered()")), MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(main_window)
        print("Leaving setupUi")

    def setup_ui_catalog(self, y_centralwidget):
        """
        Set up the Catalog area of the UI.

        Args:
            y_centralwidget:  Row position in the central widget to add this component.

        Returns:  None
        """
        # Catalog area is in the top of the central widget
        # - enable this area later since don't currenlty have browser for layers or datastores
        # - double hash below is what is commented out
        self.catalog_GroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.catalog_GroupBox.setObjectName(_fromUtf8("catalog_GroupBox"))
        self.catalog_GridLayout = QtWidgets.QGridLayout(self.catalog_GroupBox)
        self.catalog_GridLayout.setObjectName(_fromUtf8("catalog_GridLayout"))
        self.pushButton = QtWidgets.QPushButton(self.catalog_GroupBox)
        self.pushButton.setObjectName(_fromUtf8("pushButton"))
        self.catalog_GridLayout.addWidget(self.pushButton, 0, 1, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.catalog_GroupBox)
        self.lineEdit.setObjectName(_fromUtf8("lineEdit"))
        self.catalog_GridLayout.addWidget(self.lineEdit, 0, 0, 1, 1)
        self.listWidget = QtWidgets.QListWidget(self.catalog_GroupBox)
        self.listWidget.setObjectName(_fromUtf8("listWidget"))
        self.catalog_GridLayout.addWidget(self.listWidget, 1, 0, 1, 2)
        self.catalog_GroupBox.setTitle("Catalog")
        self.centralwidget_GridLayout.addWidget(self.catalog_GroupBox, y_centralwidget, 0, 1, 6)

    def setup_ui_commands(self, y_centralwidget):
        """
        Set up the Commands area of the UI.

        Args:
            y_centralwidget:  Row position in the central widget to add this component.

        Returns:  None
        """
        # Commands area is in the middle of the central widget
        # First the main commands area with border
        self.commands_GroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.commands_GroupBox.setObjectName(_fromUtf8("commands_GroupBox"))
        self.commands_GroupBox.setTitle("Commands (0 commands, 0  selected, 0 with failures, 0 with warnings)")
        self.commands_GridLayout = QtWidgets.QGridLayout(self.commands_GroupBox)
        y_commands = -1  # Row position within grid layout for commands area
        self.commands_GridLayout.setObjectName(_fromUtf8("commands_GridLayout"))

        # Commands area list
        self.commands_List = QtWidgets.QListWidget(self.commands_GroupBox)
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("MS Shell Dlg 2"))
        self.commands_List.setFont(font)
        self.commands_List.setAutoScroll(True)
        self.commands_List.setDragDropOverwriteMode(False)
        self.commands_List.setAlternatingRowColors(True)
        self.commands_List.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.commands_List.setProperty("isWrapping", False)
        self.commands_List.setLayoutMode(QtWidgets.QListView.SinglePass)
        self.commands_List.setWordWrap(True)
        self.commands_List.setSelectionRectVisible(False)
        self.commands_List.setObjectName(_fromUtf8("commands_List"))
        self.commands_List.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        y_commands = y_commands + 1
        self.commands_GridLayout.addWidget(self.commands_List, y_commands, 0, 1, 4)
        # Define listeners to handle events
        # Listen for a change in item selection within the commands_List widget.
        self.commands_List.itemSelectionChanged.connect(self.update_ui_status_commands)
        # Other connections
        # Connect right-click of commands_List widget item.
        self.commands_List.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.commands_List.customContextMenuRequested.connect(self.ui_action_command_list_right_click)

        # Commands area buttons under the list
        self.commands_RunSelectedCommands_PushButton = QtWidgets.QPushButton(self.commands_GroupBox)
        self.commands_RunSelectedCommands_PushButton.setEnabled(False)
        self.commands_RunSelectedCommands_PushButton.setDefault(False)
        self.commands_RunSelectedCommands_PushButton.setFlat(False)
        self.commands_RunSelectedCommands_PushButton.setObjectName(_fromUtf8("commands_RunSelectedCommands_PushButton"))
        self.commands_RunSelectedCommands_PushButton.setText("Run Selected Commands")
        self.commands_RunSelectedCommands_PushButton.setToolTip("Run selected commands from above to generate results.")
        y_commands = y_commands + 1
        self.commands_GridLayout.addWidget(self.commands_RunSelectedCommands_PushButton, y_commands, 0, 1, 1)
        # Connect the Run Selected Commands button.
        self.commands_RunSelectedCommands_PushButton.clicked.connect(
            functools.partial(self.processor_run_commands, True))

        self.commands_RunAllCommands_PushButton = QtWidgets.QPushButton(self.commands_GroupBox)
        self.commands_RunAllCommands_PushButton.setEnabled(False)
        self.commands_RunAllCommands_PushButton.setObjectName(_fromUtf8("commands_RunAllCommands_PushButton"))
        self.commands_RunAllCommands_PushButton.setText("Run All Commands")
        self.commands_RunAllCommands_PushButton.setToolTip("Run all commands from above to generate results.")
        self.commands_GridLayout.addWidget(self.commands_RunAllCommands_PushButton, y_commands, 1, 1, 1)
        # Connect the Run All Commands button.
        self.commands_RunAllCommands_PushButton.clicked.connect(self.processor_run_commands, False)

        # Spacer makes sure that buttons on left and right are correctly positioned
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.commands_GridLayout.addItem(spacerItem, y_commands, 2, 1, 1)

        self.commands_ClearCommands_PushButton = QtWidgets.QPushButton(self.commands_GroupBox)
        self.commands_ClearCommands_PushButton.setEnabled(False)
        self.commands_ClearCommands_PushButton.setObjectName(_fromUtf8("commands_ClearCommands_PushButton"))
        self.commands_ClearCommands_PushButton.setText("Clear Commands")
        self.commands_ClearCommands_PushButton.setToolTip(
            "Clear selected commands.  Clear all commands if none are selected.")
        self.commands_GridLayout.addWidget(self.commands_ClearCommands_PushButton, y_commands, 3, 1, 1)
        # Connect the Clear Commands button.
        self.commands_ClearCommands_PushButton.clicked.connect(self.ui_action_clear_commands)

        # Add the commands to the central widget
        self.centralwidget_GridLayout.addWidget(self.commands_GroupBox, y_centralwidget, 0, 1, 6)

    def setup_ui_menus(self, MainWindow):
        """
        Set up the Menus for the UI.

        Args:
            MainWindow: the main window that will be initialized with components (same as self in this case).

        Returns:  None
        """
        # Menu bar for the application
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1038, 20))
        self.menubar.setObjectName(_fromUtf8("menubar"))

        # File menu
        self.Menu_File = QtWidgets.QMenu(self.menubar)
        self.Menu_File.setObjectName(_fromUtf8("Menu_File"))
        self.Menu_File.setTitle("File")
        # File / New menu
        self.Menu_File_New = QtWidgets.QMenu(self.Menu_File)
        self.Menu_File_New.setObjectName(_fromUtf8("Menu_File_New"))
        self.Menu_File_New.setTitle("New")
        self.Menu_File.addAction(self.Menu_File_New.menuAction())
        # File / New / Command File menu
        self.Menu_File_New_CommandFile = QtWidgets.QAction(MainWindow)
        self.Menu_File_New_CommandFile.setObjectName(_fromUtf8("Menu_File_New_CommandFile"))
        self.Menu_File_New_CommandFile.setText("Command File")
        self.Menu_File_New.addAction(self.Menu_File_New_CommandFile)
        # File / Open menu
        self.Menu_File_Open = QtWidgets.QMenu(self.Menu_File)
        self.Menu_File_Open.setObjectName(_fromUtf8("Menu_File_Open"))
        self.Menu_File_Open.setTitle("Open")
        self.Menu_File.addAction(self.Menu_File_Open.menuAction())
        # File / Open / Command File menu
        self.Menu_File_Open_CommandFile = QtWidgets.QAction(MainWindow)
        self.Menu_File_Open_CommandFile.setObjectName(_fromUtf8("Menu_File_Open_CommandFile"))
        self.Menu_File_Open_CommandFile.setText("Command File ...")
        self.Menu_File_Open_CommandFile.triggered.connect(lambda:self.ui_action_open_command_file())
        self.Menu_File_Open.addAction(self.Menu_File_Open_CommandFile)
        self.Menu_File_Open.addSeparator()
        # File / Open / Command File History menu
        self.Menu_File_Open_CommandFileHistory_List = [QtWidgets.QAction(MainWindow) for i in range(0, 20)]
        self.ui_init_file_open_recent_files()

        # File / Save menu
        self.Menu_File_Save = QtWidgets.QMenu(self.Menu_File)
        self.Menu_File_Save.setObjectName(_fromUtf8("Menu_File_Save"))
        self.Menu_File_Save.setTitle("Save")
        self.Menu_File.addAction(self.Menu_File_Save.menuAction())
        # File / Save / Commands menu
        self.Menu_File_Save_Commands = QtWidgets.QAction(MainWindow)
        self.Menu_File_Save_Commands.setObjectName(_fromUtf8("Menu_File_Save_Commands"))
        self.Menu_File_Save_Commands.setText("Commands ...")
        self.Menu_File_Save_Commands.triggered.connect(self.ui_action_save_commands)
        self.Menu_File_Save.addAction(self.Menu_File_Save_Commands)
        # File / Save / Commands As menu
        self.Menu_File_Save_CommandsAs = QtWidgets.QAction(MainWindow)
        self.Menu_File_Save_CommandsAs.setObjectName(_fromUtf8("Menu_File_Save_CommandsAs"))
        self.Menu_File_Save_CommandsAs.setText("Commands as ...")
        self.Menu_File_Save_CommandsAs.triggered.connect(self.ui_action_save_commands_as)
        self.Menu_File_Save.addAction(self.Menu_File_Save_CommandsAs)
        # File / Print menu
        self.Menu_File_Print = QtWidgets.QAction(MainWindow)
        self.Menu_File_Print.setObjectName(_fromUtf8("Menu_File_Print"))
        self.Menu_File_Print.setText("Print")
        self.Menu_File.addAction(self.Menu_File_Print)
        # File / Properties menu
        self.Menu_File_Properties = QtWidgets.QAction(MainWindow)
        self.Menu_File_Properties.setObjectName(_fromUtf8("Menu_File_Properties"))
        self.Menu_File_Properties.setText("Properties")
        self.Menu_File.addSeparator()
        self.Menu_File.addAction(self.Menu_File_Properties)
        # File / Exit menu
        self.Menu_File_Exit = QtWidgets.QAction(MainWindow)
        self.Menu_File_Exit.setObjectName(_fromUtf8("Menu_File_Exit"))
        self.Menu_File_Exit.setText("Exit")
        self.Menu_File.addSeparator()
        self.Menu_File.addAction(self.Menu_File_Exit)
        # Set the menu bar
        MainWindow.setMenuBar(self.menubar)
        self.menubar.addAction(self.Menu_File.menuAction())

        # Commands menu
        self.Menu_Commands = QtWidgets.QMenu(self.menubar)
        self.Menu_Commands.setObjectName(_fromUtf8("Menu_Commands"))
        self.Menu_Commands.setTitle("Commands")

        # Commands / GeoLayers menu
        self.Menu_Commands_GeoLayers = QtWidgets.QMenu(self.Menu_Commands)
        self.Menu_Commands_GeoLayers.setObjectName(_fromUtf8("Menu_Commands_GeoLayers"))
        self.Menu_Commands_GeoLayers.setTitle("GeoLayers")
        self.Menu_Commands.addAction(self.Menu_Commands_GeoLayers.menuAction())
        # Commands / GeoLayers / Read menu
        self.Menu_Commands_GeoLayers_Read = QtWidgets.QMenu(self.Menu_Commands_GeoLayers)
        self.Menu_Commands_GeoLayers_Read.setObjectName(_fromUtf8("Menu_Commands_GeoLayers_Read"))
        self.Menu_Commands_GeoLayers_Read.setTitle("Read")
        ## self.actionRead.setText("Read")
        ## self.actionRead = QtWidgets.QAction(MainWindow)
        ## self.actionRead.setObjectName(_fromUtf8("actionRead"))
        self.Menu_Commands_GeoLayers.addAction(self.Menu_Commands_GeoLayers_Read.menuAction())
        # Commands / GeoLayers / Read menu for specific commands
        self.Menu_Commands_GeoLayers_Read_ReadGeoLayerFromGeoJSON = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_GeoLayers_Read_ReadGeoLayerFromGeoJSON.setObjectName(
            _fromUtf8("Menu_Commands_GeoLayers_Read_ReadGeoLayerFromGeoJSON"))
        self.Menu_Commands_GeoLayers_Read_ReadGeoLayerFromGeoJSON.setText(
            "ReadGeoLayerFromGeoJSON <reads a GeoLayer from a .geojson file>")
        self.GeoLayers_Read_ReadGeoLayerFromShapefile = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_GeoLayers_Read.addAction(self.Menu_Commands_GeoLayers_Read_ReadGeoLayerFromGeoJSON)
        self.Menu_Commands_GeoLayers_Read_ReadGeoLayerFromGeoJSON.triggered.connect(
            functools.partial(self.new_command_editor, "ReadGeoLayerFromGeoJSON"))
        #
        self.GeoLayers_Read_ReadGeoLayersFromFGDB = QtWidgets.QAction(MainWindow)
        self.GeoLayers_Read_ReadGeoLayersFromFGDB.setObjectName(_fromUtf8("GeoLayers_Read_ReadGeoLayersFromFGDB"))
        self.Menu_Commands_GeoLayers_Read.addAction(self.GeoLayers_Read_ReadGeoLayersFromFGDB)
        self.GeoLayers_Read_ReadGeoLayersFromFGDB.setText(
            "ReadGeoLayersFromFGDB <reads 1+ GeoLayer(s) from the feature classes of a file geodatabase>")
        #
        self.GeoLayers_Read_ReadGeoLayersFromFolder = QtWidgets.QAction(MainWindow)
        self.GeoLayers_Read_ReadGeoLayersFromFolder.setObjectName(_fromUtf8("GeoLayers_Read_ReadGeoLayersFromFolder"))
        self.GeoLayers_Read_ReadGeoLayersFromFolder.setText(
            "ReadGeoLayersFromFolder <reads 1+ GeoLayer(s) from a local folder>")
        self.Menu_Commands_GeoLayers_Read.addAction(self.GeoLayers_Read_ReadGeoLayersFromFolder)
        #
        self.GeoLayers_Read_ReadGeoLayerFromShapefile.setObjectName(
            _fromUtf8("GeoLayers_Read_ReadGeoLayerFromShapefile"))
        self.Menu_Commands_GeoLayers_Read.addAction(self.GeoLayers_Read_ReadGeoLayerFromShapefile)
        self.GeoLayers_Read_ReadGeoLayerFromShapefile.setText(
            "ReadGeoLayerFromShapefile <reads a GeoLayer from a shapefile>")
        # Commands / GeoLayers / Process menu
        self.Menu_Commands_GeoLayers_Process = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_GeoLayers_Process.setObjectName(_fromUtf8("Menu_Commands_GeoLayers_Process"))
        self.Menu_Commands_GeoLayers_Process.setText("Process")
        self.Menu_Commands_GeoLayers.addAction(self.Menu_Commands_GeoLayers_Process)
        # Commands / GeoLayers / Write menu
        # self.actionWrite = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_GeoLayers_Write = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_GeoLayers_Write.setObjectName(_fromUtf8("Menu_Commands_GeoLayers_Write"))
        self.Menu_Commands_GeoLayers_Write.setText("Write")
        # self.actionWrite.setText("Write")
        # self.actionWrite.setObjectName(_fromUtf8("actionWrite"))
        # self.Menu_Commands_GeoLayers_Write = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_GeoLayers.addAction(self.Menu_Commands_GeoLayers_Write)

        # Commands / Tables menu
        self.Menu_Commands_Tables = QtWidgets.QMenu(self.Menu_Commands)
        self.Menu_Commands_Tables.setObjectName(_fromUtf8("Menu_Commands_Tables"))
        self.Menu_Commands_Tables.setTitle("Tables")
        self.Menu_Commands.addAction(self.Menu_Commands_Tables.menuAction())
        # Commands / Tables / Read menu
        self.Menu_Commands_Tables_Read = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_Tables_Read.setObjectName(_fromUtf8("Menu_Commands_Tables_Read"))
        self.Menu_Commands_Tables_Read.setText("Read")
        self.Menu_Commands_Tables.addAction(self.Menu_Commands_Tables_Read)
        # Commands / Tables / Process menu
        self.Menu_Commands_Tables_Process = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_Tables_Process.setObjectName(_fromUtf8("Menu_Commands_Tables_Process"))
        self.Menu_Commands_Tables_Process.setText("Process")
        self.Menu_Commands_Tables.addAction(self.Menu_Commands_Tables_Process)
        # Commands / Tables / Write menu
        self.Menu_Commands_Tables_Write = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_Tables_Write.setObjectName(_fromUtf8("Menu_Commands_Tables_Write"))
        self.Menu_Commands_Tables_Write.setText("Write")
        self.Menu_Commands_Tables.addAction(self.Menu_Commands_Tables_Write)

        # Commands / General - Comments menu
        self.Menu_Commands_General_Comments = QtWidgets.QMenu(self.Menu_Commands)
        self.Menu_Commands_General_Comments.setObjectName(_fromUtf8("Menu_Commands_General_Comments"))
        self.Menu_Commands_General_Comments.setTitle("General - Comments")
        self.Menu_Commands.addSeparator()
        self.Menu_Commands.addAction(self.Menu_Commands_General_Comments.menuAction())
        # Comments / General - Comments / Single menu
        self.Menu_Commands_General_Comments_Single = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_General_Comments_Single.setObjectName(_fromUtf8("Menu_Commands_General_Comments_Single"))
        self.Menu_Commands_General_Comments_Single.setText("# comments <enter 1+ comments each starting with #>")
        self.Menu_Commands_General_Comments.addAction(self.Menu_Commands_General_Comments_Single)
        # Comments / General - Comments / Multi-line menus
        self.Menu_Commands_General_Comments_MultipleStart = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_General_Comments_MultipleStart.setObjectName(
            _fromUtf8("Menu_Commands_General_Comments_MultipleStart"))
        self.Menu_Commands_General_Comments_MultipleStart.setText("/* <start multi-line comment section> ")
        self.Menu_Commands_General_Comments.addAction(self.Menu_Commands_General_Comments_MultipleStart)
        #
        self.Menu_Commands_General_Comments_MultipleEnd = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_General_Comments_MultipleEnd.setObjectName(
            _fromUtf8("Menu_Commands_General_Comments_MultipleEnd"))
        self.Menu_Commands_General_Comments_MultipleEnd.setText("*/ <end multi-line comment section>")
        self.Menu_Commands_General_Comments.addAction(self.Menu_Commands_General_Comments_MultipleEnd)
        # Comments / General - Comments / Enabled menu
        self.Menu_Commands_General_Comments_Enabled = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_General_Comments_Enabled.setObjectName(_fromUtf8("Menu_Commands_General_Comments_Enabled"))
        self.Menu_Commands_General_Comments_Enabled.setText("#@enabled False <disables the test>")
        self.Menu_Commands_General_Comments.addAction(self.Menu_Commands_General_Comments_Enabled)
        # Comments / General - Comments / Expected Status menus
        self.Menu_Commands_General_Comments_ExpectedStatusFail = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_General_Comments_ExpectedStatusFail.setObjectName(
            _fromUtf8("Menu_Commands_General_Comments_ExpectedStatusFail"))
        self.Menu_Commands_General_Comments_ExpectedStatusFail.setText(
            "#@expectedStatus Failure <used to test commands>")
        self.Menu_Commands_General_Comments.addAction(self.Menu_Commands_General_Comments_ExpectedStatusFail)
        #
        self.Menu_Commands_General_Comments_ExpectedStatusWarn = QtWidgets.QAction(MainWindow)
        self.Menu_Commands_General_Comments_ExpectedStatusWarn.setObjectName(
            _fromUtf8("Menu_Commands_General_Comments_ExpectedStatusWarn"))
        self.Menu_Commands_General_Comments_ExpectedStatusWarn.setText(
            "#@expectedStatus Warning <used to test commands>")
        self.Menu_Commands_General_Comments.addAction(self.Menu_Commands_General_Comments_ExpectedStatusWarn)
        # Add to menu bar
        self.menubar.addAction(self.Menu_Commands.menuAction())

        # Help menu
        self.Menu_Help = QtWidgets.QMenu(self.menubar)
        self.Menu_Help.setObjectName(_fromUtf8("Menu_Help"))
        self.Menu_Help.setTitle("Help")
        # Help / About menu
        self.Menu_Help_About = QtWidgets.QAction(MainWindow)
        self.Menu_Help_About.setObjectName(_fromUtf8("Menu_Help_About"))
        self.Menu_Help_About.setText("About GeoProcessor")
        self.Menu_Help.addAction(self.Menu_Help_About)
        self.Menu_Help_About.triggered.connect(self.ui_action_help_about)
        # Help / View Documentation menu
        self.Menu_Help_ViewDocumentation = QtWidgets.QAction(MainWindow)
        self.Menu_Help_ViewDocumentation.setObjectName(_fromUtf8("Menu_Help_ViewDocumentation"))
        self.Menu_Help_ViewDocumentation.setText("View Documentation")
        self.Menu_Help.addAction(self.Menu_Help_ViewDocumentation)
        # Connect the Help > View Documentation menu tab.
        self.Menu_Help_ViewDocumentation.triggered.connect(self.ui_action_view_documentation)
        # Add Help menu to menubar
        self.menubar.addAction(self.Menu_Help.menuAction())

    def setup_ui_results(self, y_centralwidget):
        """
        Set up the Results area of the UI.

        Args:
            y_centralwidget:  Row position in the central widget to add this component.

        Returns:  None
        """
        # Results area is in the bottom of the central widget
        # - Use Tab widget with vertical layout
        # - Alphabetize the tabs
        self.results_GroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.results_GroupBox.setTitle("Results")
        self.results_GroupBox.setObjectName(_fromUtf8("results_GroupBox"))
        self.results_VerticalLayout = QtWidgets.QVBoxLayout(self.results_GroupBox)
        self.results_VerticalLayout.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.results_VerticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.results_TabWidget = QtWidgets.QTabWidget(self.results_GroupBox)
        self.results_TabWidget.setObjectName(_fromUtf8("results_TabWidget"))

        # Results GeoLayers tab
        # - Contains a table of GeoLayer
        self.results_GeoLayers_Tab = QtWidgets.QWidget()
        self.results_GeoLayers_Tab.setAcceptDrops(False)
        self.results_GeoLayers_Tab.setObjectName(_fromUtf8("results_GeoLayers_Tab"))
        self.results_GeoLayers_VerticalLayout = QtWidgets.QVBoxLayout(self.results_GeoLayers_Tab)
        self.results_GeoLayers_VerticalLayout.setObjectName(_fromUtf8("results_GeoLayers_VerticalLayout"))
        self.results_GeoLayers_GroupBox = QtWidgets.QGroupBox(self.results_GeoLayers_Tab)
        self.results_GeoLayers_GroupBox.setObjectName(_fromUtf8("results_GeoLayers_GroupBox"))
        self.results_GeoLayers_GroupBox_VerticalLayout = QtWidgets.QVBoxLayout(self.results_GeoLayers_GroupBox)
        self.results_GeoLayers_GroupBox_VerticalLayout.setObjectName(_fromUtf8("results_GeoLayers_GroupBox_VerticalLayout"))
        self.results_GeoLayers_Table = QtWidgets.QTableWidget(self.results_GeoLayers_GroupBox)
        self.results_GeoLayers_Table.setObjectName(_fromUtf8("results_GeoLayers_Table"))
        self.results_GeoLayers_Table.setColumnCount(5)
        self.results_GeoLayers_Table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.results_GeoLayers_Table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_GeoLayers_Table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_GeoLayers_Table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_GeoLayers_Table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_GeoLayers_Table.setHorizontalHeaderItem(4, item)
        self.results_GeoLayers_Table.horizontalHeader().setCascadingSectionResizes(False)
        self.results_GeoLayers_Table.horizontalHeader().setDefaultSectionSize(200)
        self.results_GeoLayers_Table.horizontalHeader().setSortIndicatorShown(True)
        self.results_GeoLayers_Table.horizontalHeader().setStretchLastSection(True)
        self.results_GeoLayers_GroupBox_VerticalLayout.addWidget(self.results_GeoLayers_Table)
        self.results_GeoLayers_VerticalLayout.addWidget(self.results_GeoLayers_GroupBox)
        self.results_TabWidget.addTab(self.results_GeoLayers_Tab, _fromUtf8(""))
        # Used to be in retranslateUi
        self.results_GeoLayers_GroupBox.setTitle("GeoLayers (0 GeoLayers, 0 selected)")
        self.results_GeoLayers_Table.horizontalHeaderItem(0).setText("GeoLayer ID")
        self.results_GeoLayers_Table.horizontalHeaderItem(1).setText("Geometry")
        self.results_GeoLayers_Table.horizontalHeaderItem(2).setText("Feature Count")
        self.results_GeoLayers_Table.horizontalHeaderItem(3).setText("Coordinate Reference System")
        self.results_GeoLayers_Table.horizontalHeaderItem(4).setText("Command Reference")
        self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_GeoLayers_Tab),"GeoLayers")

        # Results - Maps tab
        self.results_Maps_Tab = QtWidgets.QWidget()
        self.results_Maps_Tab.setObjectName(_fromUtf8("results_Maps_Tab"))
        self.results_Maps_VerticalLayout = QtWidgets.QVBoxLayout(self.results_Maps_Tab)
        self.results_Maps_VerticalLayout.setObjectName(_fromUtf8("results_Maps_VerticalLayout"))
        self.results_Maps_GroupBox = QtWidgets.QGroupBox(self.results_Maps_Tab)
        self.results_Maps_GroupBox.setObjectName(_fromUtf8("results_Maps_GroupBox"))
        self.results_Maps_GroupBox_VerticalLayout = QtWidgets.QVBoxLayout(self.results_Maps_GroupBox)
        self.results_Maps_GroupBox_VerticalLayout.setObjectName(_fromUtf8("results_Maps_GroupBox_VerticalLayout"))
        self.results_Maps_Table = QtWidgets.QTableWidget(self.results_Maps_GroupBox)
        self.results_Maps_Table.setObjectName(_fromUtf8("results_Maps_Table"))
        self.results_Maps_Table.setColumnCount(4)
        self.results_Maps_Table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.results_Maps_Table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Maps_Table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Maps_Table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Maps_Table.setHorizontalHeaderItem(3, item)
        self.results_Maps_Table.horizontalHeader().setDefaultSectionSize(175)
        self.results_Maps_Table.horizontalHeader().setStretchLastSection(True)
        self.results_Maps_GroupBox_VerticalLayout.addWidget(self.results_Maps_Table)
        self.results_Maps_VerticalLayout.addWidget(self.results_Maps_GroupBox)
        self.results_TabWidget.addTab(self.results_Maps_Tab, _fromUtf8(""))
        # Used to be in retranslateUi
        self.results_Maps_GroupBox.setTitle("Maps (0 Maps, 0 selected)")
        self.results_Maps_Table.horizontalHeaderItem(0).setText("Map ID")
        self.results_Maps_Table.horizontalHeaderItem(1).setText("Included GeoLayers")
        self.results_Maps_Table.horizontalHeaderItem(2).setText("Coordinate Reference System")
        self.results_Maps_Table.horizontalHeaderItem(3).setText("Command Reference")
        self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_Maps_Tab),"Maps")

        # Results - Output Files tab
        self.results_OutputFiles_Tab = QtWidgets.QWidget()
        self.results_OutputFiles_Tab.setObjectName(_fromUtf8("results_OutputFiles_Tab"))
        self.results_OutputFiles_VerticalLayout = QtWidgets.QVBoxLayout(self.results_OutputFiles_Tab)
        self.results_OutputFiles_VerticalLayout.setObjectName(_fromUtf8("results_OutputFiles_VerticalLayout"))
        self.results_OutputFiles_GroupBox = QtWidgets.QGroupBox(self.results_OutputFiles_Tab)
        self.results_OutputFiles_GroupBox.setObjectName(_fromUtf8("results_OutputFiles_GroupBox"))
        self.results_OutputFiles_GroupBox_VerticalLayout = QtWidgets.QVBoxLayout(self.results_OutputFiles_GroupBox)
        self.results_OutputFiles_GroupBox_VerticalLayout.setObjectName(_fromUtf8("results_OutputFiles_GroupBox_VerticalLayout"))
        self.results_OutputFiles_Table = QtWidgets.QTableWidget(self.results_OutputFiles_GroupBox)
        self.results_OutputFiles_Table.setObjectName(_fromUtf8("results_OutputFiles_Table"))
        single_column = True  # Like TSTool, only the filename
        if single_column:
            self.results_OutputFiles_Table.setColumnCount(1)
        else:
            self.results_OutputFiles_Table.setColumnCount(3)
        self.results_OutputFiles_Table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.results_OutputFiles_Table.setHorizontalHeaderItem(0, item)
        if not single_column:
            item = QtWidgets.QTableWidgetItem()
            self.results_OutputFiles_Table.setHorizontalHeaderItem(1, item)
            item = QtWidgets.QTableWidgetItem()
            self.results_OutputFiles_Table.setHorizontalHeaderItem(2, item)
        self.results_OutputFiles_Table.horizontalHeader().setDefaultSectionSize(150)
        self.results_OutputFiles_Table.horizontalHeader().setStretchLastSection(True)
        self.results_OutputFiles_GroupBox_VerticalLayout.addWidget(self.results_OutputFiles_Table)
        self.results_OutputFiles_VerticalLayout.addWidget(self.results_OutputFiles_GroupBox)
        self.results_TabWidget.addTab(self.results_OutputFiles_Tab, _fromUtf8(""))
        # Used to be in retranslateUi
        self.results_OutputFiles_GroupBox.setTitle("Output Files (0 Output Files, 0 selected)")
        self.results_OutputFiles_Table.horizontalHeaderItem(0).setText("Output File ")
        if not single_column:
            self.results_OutputFiles_Table.horizontalHeaderItem(1).setText("File Type")
            self.results_OutputFiles_Table.horizontalHeaderItem(2).setText("Command Reference")
        self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_OutputFiles_Tab), "Output Files")

        # Results - Properties tab
        self.results_Properties_Tab = QtWidgets.QWidget()
        self.results_Properties_Tab.setObjectName(_fromUtf8("results_Properties_Tab"))
        self.results_Properties_Tab_VerticalLayout = QtWidgets.QVBoxLayout(self.results_Properties_Tab)
        self.results_Properties_Tab_VerticalLayout.setObjectName(_fromUtf8("results_Properties_Tab_VerticalLayout"))
        self.results_Properties_GroupBox = QtWidgets.QGroupBox(self.results_Properties_Tab)
        self.results_Properties_GroupBox.setObjectName(_fromUtf8("results_Properties_GroupBox"))
        self.results_Properties_GroupBox_VerticalLayout = QtWidgets.QVBoxLayout(self.results_Properties_GroupBox)
        self.results_Properties_GroupBox_VerticalLayout.setObjectName(_fromUtf8("results_Properties_GroupBox_VerticalLayout"))
        self.results_Properties_Table = QtWidgets.QTableWidget(self.results_Properties_GroupBox)
        self.results_Properties_Table.setAlternatingRowColors(True)
        self.results_Properties_Table.setObjectName(_fromUtf8("results_Properties_Table"))
        self.results_Properties_Table.setColumnCount(2)
        self.results_Properties_Table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.results_Properties_Table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Properties_Table.setHorizontalHeaderItem(1, item)
        self.results_Properties_Table.horizontalHeader().setStretchLastSection(True)
        self.results_Properties_Table.verticalHeader().setStretchLastSection(False)
        self.results_Properties_GroupBox_VerticalLayout.addWidget(self.results_Properties_Table)
        self.results_Properties_Tab_VerticalLayout.addWidget(self.results_Properties_GroupBox)
        self.results_TabWidget.addTab(self.results_Properties_Tab, _fromUtf8(""))
        # Used to be in retranslateUi
        self.results_Properties_GroupBox.setTitle(
            "Processor properties control processing and can be used in some command " +
            "parameters using ${Property} notation (see command documentation). ")
        self.results_Properties_Table.horizontalHeaderItem(0).setText("Property Name")
        self.results_Properties_Table.horizontalHeaderItem(1).setText("Property Value")
        self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_Properties_Tab), "Properties")

        # Results - Tables tab
        self.results_Tables_Tab = QtWidgets.QWidget()
        self.results_Tables_Tab.setObjectName(_fromUtf8("results_Tables_Tab"))
        self.results_Tables_VerticalLayout = QtWidgets.QVBoxLayout(self.results_Tables_Tab)
        self.results_Tables_VerticalLayout.setObjectName(_fromUtf8("results_Tables_VerticalLayout"))
        self.results_Tables_GroupBox = QtWidgets.QGroupBox(self.results_Tables_Tab)
        self.results_Tables_GroupBox.setObjectName(_fromUtf8("results_Tables_GroupBox"))
        self.results_Tables_GroupBox_VerticalLayout = QtWidgets.QVBoxLayout(self.results_Tables_GroupBox)
        self.results_Tables_GroupBox_VerticalLayout.setObjectName(_fromUtf8("results_Tables_GroupBox_VerticalLayout"))
        self.results_Tables_Table = QtWidgets.QTableWidget(self.results_Tables_GroupBox)
        self.results_Tables_Table.setObjectName(_fromUtf8("results_Tables_Table"))
        self.results_Tables_Table.setColumnCount(4)
        self.results_Tables_Table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.results_Tables_Table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Tables_Table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Tables_Table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Tables_Table.setHorizontalHeaderItem(3, item)
        self.results_Tables_Table.horizontalHeader().setDefaultSectionSize(175)
        self.results_Tables_GroupBox_VerticalLayout.addWidget(self.results_Tables_Table)
        self.results_Tables_VerticalLayout.addWidget(self.results_Tables_GroupBox)
        self.results_TabWidget.addTab(self.results_Tables_Tab, _fromUtf8(""))
        # Used to be in retranslateUi
        self.results_Tables_GroupBox.setTitle("Tables (0 Tables, 0 selected)")
        self.results_Tables_Table.horizontalHeaderItem(0).setText("Table ID")
        self.results_Tables_Table.horizontalHeaderItem(1).setText("Column Count")
        self.results_Tables_Table.horizontalHeaderItem(2).setText("Row Count")
        self.results_Tables_Table.horizontalHeaderItem(3).setText("Command Reference")
        self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_Tables_Tab), "Tables")

        # Add the Results tab to the vertical layout
        self.results_VerticalLayout.addWidget(self.results_TabWidget)
        # Now add the Results to the central widget
        self.centralwidget_GridLayout.addWidget(self.results_GroupBox, y_centralwidget, 0, 1, 6)
        # Set the visible tab to the GeoLayers
        self.results_TabWidget.setCurrentIndex(0)

        # Set up event handlers

        # Listen for a change in item selection within the results_GeoLayers_Table widget.
        self.results_GeoLayers_Table.itemSelectionChanged.connect(self.update_ui_status)
        # Listen for a change in item selection within the results_Tables_Table widget.
        self.results_Tables_Table.itemSelectionChanged.connect(self.update_ui_status)
        # Listen for a change in item selection within the results_Maps_Table widget.
        self.results_Maps_Table.itemSelectionChanged.connect(self.update_ui_status)
        # Listen for a change in item selection within the results_OutputFiles_Table widget.
        self.results_OutputFiles_Table.itemSelectionChanged.connect(self.update_ui_status)

    # TODO smalers 2018-07-24 evaluate whether the following status components can be moved to status bar area
    def setup_ui_status(self, MainWindow, y_centralwidget):
        """
        Set up the Status area of the UI.

        Args:
            y_centralwidget:  Row position in the central widget to add this component.

        Returns:  None
        """
        # Set the status bar
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName(_fromUtf8("statusbar"))
        MainWindow.setStatusBar(self.statusbar)

        # Command status in footer of the window - currently uses a general Widget area
        self.status_Widget = QtWidgets.QWidget(self.centralwidget)
        self.status_GridLayout = QtWidgets.QGridLayout(self.status_Widget)
        y_status = -1
        y_status = y_status + 1
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.status_GridLayout.addItem(spacerItem1, y_status, 1, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.status_GridLayout.addItem(spacerItem2, y_status, 2, 1, 1)
        # Progress bar for overall workflow
        self.status_CommandWorkflow_StatusBar = QtWidgets.QProgressBar(self.status_Widget)
        self.status_CommandWorkflow_StatusBar.setObjectName(_fromUtf8("status_CommandWorkflow_StatusBar"))
        self.status_CommandWorkflow_StatusBar.setToolTip("Indicates progress processing the workflow")
        self.status_CommandWorkflow_StatusBar.setProperty("value", 0)
        self.status_CommandWorkflow_StatusBar.setInvertedAppearance(False)
        self.status_GridLayout.addWidget(self.status_CommandWorkflow_StatusBar, y_status, 3, 1, 1)
        # Progress bar for current command
        self.status_CurrentCommand_StatusBar = QtWidgets.QProgressBar(self.status_Widget)
        self.status_CurrentCommand_StatusBar.setObjectName(_fromUtf8("status_CurrentCommand_StatusBar"))
        self.status_CurrentCommand_StatusBar.setToolTip("Indicates progress within current command")
        self.status_CurrentCommand_StatusBar.setProperty("value", 0)
        self.status_CurrentCommand_StatusBar.setInvertedAppearance(False)
        self.status_GridLayout.addWidget(self.status_CurrentCommand_StatusBar, y_status, 4, 1, 1)
        # General status label
        self.status_Label = QtWidgets.QLabel(self.status_Widget)
        self.status_Label.setObjectName(_fromUtf8("status_Label"))
        self.status_Label.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.status_Label.setFrameShadow(QtWidgets.QFrame.Plain)
        self.status_Label.setLineWidth(2)
        self.status_Label.setText("Ready")
        self.status_GridLayout.addWidget(self.status_Label, y_status, 5, 1, 1)

        # Add the status component to the central widget
        self.centralwidget_GridLayout.addWidget(self.status_Widget, y_centralwidget, 0, 1, 6)

    def show_results(self):
        """
        Populates the Results tables of the UI to reflect results of running the GeoProcessor, including
        the existing GeoLayers, Maps, Output Files, Properties, and Tables.

        Returns: None
        """
        # Call the specific functions for each output category
        # - Each call will also update the status information in the UI (counts, selected, etc.)
        logger = logging.getLogger(__name__)
        try:
            self.show_results_geolayers()
        except Exception as e:
            message="Error showing GeoLayers in Results"
            logger.error(message, e, exc_info=True)
        try:
            self.show_results_maps()
        except Exception as e:
            message="Error showing Maps in Results"
            logger.error(message, e, exc_info=True)
        try:
            self.show_results_output_files()
        except Exception as e:
            message="Error showing Output Files in Results"
            logger.error(message, e, exc_info=True)
        try:
            self.show_results_properties()
        except Exception as e:
            message="Error showing Properties in Results"
            logger.error(message, e, exc_info=True)
        try:
            self.show_results_tables()
        except Exception as e:
            message="Error showing Tables in Results"
            logger.error(message, e, exc_info=True)

    def show_results_geolayers(self):
        """
        Populates the Results / GeoLayers display.

        Returns: None
        """
        # Remove items from the Results GeoLayers table (from a previous run).
        self.results_GeoLayers_Table.setRowCount(0)

        # Populate the Results GeoLayers Table.
        # Iterate through all of the GeoLayer objects in the GeoProcessor.
        print("Showing " + str(len(self.gp.geolayers)) + " geolayers")
        for geolayer in self.gp.geolayers:

            # Get the index of the next available row in the table. Add a new row to the table.
            new_row_index = self.results_GeoLayers_Table.rowCount()
            self.results_GeoLayers_Table.insertRow(new_row_index)

            # Retrieve the GeoLayer's GeoLayer ID and set as the attribute for the GeoLayer ID column.
            self.results_GeoLayers_Table.setItem(new_row_index, 0, QtWidgets.QTableWidgetItem(geolayer.id))

            # Retrieve the GeoLayer's geometry and set as the attribute for the Geometry column.
            self.results_GeoLayers_Table.setItem(new_row_index, 1, QtWidgets.QTableWidgetItem(geolayer.get_geometry()))

            # Retrieve the number of features within the GeoLayer and set as the attribute for the Feature Count column.
            self.results_GeoLayers_Table.setItem(new_row_index, 2,
                                                 QtWidgets.QTableWidgetItem(str(geolayer.get_feature_count())))

            # Retrieve the GeoLayer's CRS and set as the attribute for the Coordinate Reference System column.
            self.results_GeoLayers_Table.setItem(new_row_index, 3, QtWidgets.QTableWidgetItem(geolayer.get_crs()))

        self.update_ui_status_results_geolayers()

    def show_results_maps(self):
        """
        Populates the Results / Maps display.

        Returns: None
        """
        # Remove items from the Results Maps table (from a previous run).
        self.results_Maps_Table.setRowCount(0)
        # TODO egiles 2018-05-14 Populate the Results / Maps display

        # Remove items from the Results Output Files table (from a previous run).
        self.results_OutputFiles_Table.setRowCount(0)

        self.update_ui_status_results_maps()

    def show_results_output_files(self):
        """
        Populates the Results / Output Files display.

        Returns: None
        """
        # Remove items from the Results Properties table (from a previous run).
        self.results_OutputFiles_Table.setRowCount(0)

        # Populate the Results / Output Files Table
        # Iterate through all of the Output Files in the GeoProcessor.
        single_column = True  # Like TSTool, only the filename
        for output_file in self.gp.output_files:

            # Get the index of the next available row in the table. Add a new row to the table.
            new_row_index = self.results_OutputFiles_Table.rowCount()
            self.results_OutputFiles_Table.insertRow(new_row_index)

            # Retrieve the absolute pathname of the output file and set as the attribute for the Output File column.
            self.results_OutputFiles_Table.setItem(new_row_index, 0, QtWidgets.QTableWidgetItem(output_file))

            if not single_column:
                # Get the extension of the output file.
                output_file_ext = io_util.get_extension(output_file)

                # A dictionary that relates common file extensions to the appropriate file name
                extension_dictionary = {'.xlsx': 'Microsoft Excel Open XML Format Spreadsheet',
                                        '.geojson': 'GeoJSON',
                                        '.xls': 'Microsoft Excel 97-2003 Worksheet'}

                # Retrieve the output file type and set as the attribute for the File Type column. If h
                if output_file_ext in extension_dictionary.keys():
                    self.results_OutputFiles_Table.setItem(new_row_index, 1,
                                                           QtWidgets.QTableWidgetItem(
                                                           extension_dictionary[output_file_ext]))
                else:
                    self.results_OutputFiles_Table.setItem(new_row_index, 1,
                                                           QtWidgets.QTableWidgetItem("Unknown"))
        self.update_ui_status_results_output_files()

    def show_results_properties(self):
        """
        Populates the Results / Properties Files display.

        Returns: None
        """
        # Remove items from the Results Properties table (from a previous run).
        self.results_Properties_Table.setRowCount(0)
        print("Showing property results")

        # Populate the Results / Properties Table.
        # Iterate through all of the properties in the GeoProcessor.
        for prop_name, prop_value in self.gp.properties.items():
            # Get the index of the next available row in the table. Add a new row to the table.
            new_row_index = self.results_Properties_Table.rowCount()
            #print("Showing property name=" + str(prop_name) + " value=" + str(prop_value) + " row " + str(new_row_index))
            self.results_Properties_Table.insertRow(new_row_index)

            # Set the property name as the attribute for the Property Name column.
            self.results_Properties_Table.setItem(new_row_index, 0, QtWidgets.QTableWidgetItem(prop_name))

            # Set the property value as the attribute for the Property Value column.
            # - Have to cast to string because table is configured to display strings
            self.results_Properties_Table.setItem(new_row_index, 1, QtWidgets.QTableWidgetItem(str(prop_value)))

    def show_results_tables(self):
        """
        Populates the Results / Tables Files display.

        Returns: None
        """
        # Remove items from the Results Tables table (from a previous run).
        self.results_Tables_Table.setRowCount(0)

        # Populate the Results / Tables Table.
        # Iterate through all of the Table objects in the GeoProcessor.
        for table in self.gp.tables:

            # Get the index of the next available row in the table. Add a new row to the table.
            new_row_index = self.results_Tables_Table.rowCount()
            self.results_Tables_Table.insertRow(new_row_index)

            # Retrieve the Tables's Table ID and set as the attribute for the Table ID column.
            self.results_Tables_Table.setItem(new_row_index, 0, QtWidgets.QTableWidgetItem(table.id))

            # Retrieve the number of columns in the Table and set as the attribute for the Column Count column.
            self.results_Tables_Table.setItem(new_row_index, 1,
                                              QtWidgets.QTableWidgetItem(str(table.count(returnCol=True))))

            # Retrieve the number of rows in the Table and set as the attribute for the Row Count column.
            self.results_Tables_Table.setItem(new_row_index, 2,
                                              QtWidgets.QTableWidgetItem(str(table.count(returnCol=False))))

        # Update the results count and results' tables' labels to show that the results were populated.
        self.update_ui_status_results_tables()

    def ui_action_clear_commands(self):
        """
        Clear one or more of the commands from the Command List widget.
        If no commands are selected or all are selected, clear all.
        If one or more commands are selected, clear the selected commands without asking.

        Returns: None
        """
        selected_commands_count = len(self.commands_List.selectedIndexes())
        commands_count = self.commands_List.count()
        if selected_commands_count == 0 or selected_commands_count == commands_count:
            # Open a message box to confirm with the user that they want to delete all of the commands.
            response = qt_util.new_message_box(
                QtWidgets.QMessageBox.Question,
                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                "Are you sure you want to delete ALL the commands?",
                "Clear Commands")

            # If the user confirms that they want to delete the selected commands, delete the commands.
            # - Delete using objects so indices are not an issue
            if response == QtWidgets.QMessageBox.Yes:
                # Iterate over and remove all of the items (command strings).
                # - Delete in reverse order so that overhead of shifting does not occur
                for i in range(commands_count-1, -1, -1):
                    self.commands_List.takeItem(i)
        else:
            # Iterate over and remove each selected item (command strings)
            for selected_item in self.commands_List.selectedItems():
                self.commands_List.takeItem(self.commands_List.row(selected_item))

        # Update the command count and Command_List label to show that commands were deleted.
        self.update_ui_status_commands()

    def ui_action_command_list_right_click(self, q_pos):
        """
        Open the Command_List widget right-click menu.
        REF: https://stackoverflow.com/questions/31380457/add-right-click-functionality-to-listwidget-in-pyqt4?
        utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa

        Arg:
            q_pos: The position of the right-click. Updated automatically within interface. Do not need to manually
                pass a value to this variable. Used to determine where to display the popup menu.

        Returns: None
        """

        # Create the Qt Menu object.
        self.rightClickMenu = QtWidgets.QMenu()

        # Add the menu options to the right-click menu.
        menu_item_edit_command = self.rightClickMenu.addAction("Edit Command")
        menu_item_delete_command = self.rightClickMenu.addAction("Delete Command")

        # Connect the menu options to the appropriate actions.
        menu_item_edit_command.triggered.connect(self.edit_command_editor)
        menu_item_delete_command.triggered.connect(self.clear_command_from_rightclick)

        # Set the position on the right-click menu to appear at the click point.
        parent_pos = self.commands_List.mapToGlobal(QtCore.QPoint(0, 0))
        self.rightClickMenu.move(parent_pos + q_pos)

        # Display the right-click menu.
        self.rightClickMenu.show()

    # TODO smalers 2018-07-24 need to make the dialog nicer, including live link to OWF website
    def ui_action_help_about(self):
        """
        Display the Help / About dialog.

        Returns: None
        """
        version = self.runtime_properties['AppVersion']
        version_date = self.runtime_properties['AppVersionDate']
        qt_util.new_message_box(
            QtWidgets.QMessageBox.Information,
            QtWidgets.QMessageBox.Ok,
            "GeoProcessor " + version + " (" + version_date + ")\n" +
            "Developed by the Open Water Foundation.\n" +
            "The GeoProcessor automates geospatial processing.",
            "About GeoProcessor")

    def ui_init_file_open_recent_files(self):
        max = 20 if (len(self.app_session.read_history()) > 20) else len(self.app_session.read_history())
        for i in range(0, max):
            if (i >= len(self.app_session.read_history())):
                filename = ""
            else:
                filename = str(self.app_session.read_history()[i])
            self.Menu_File_Open_CommandFileHistory_List[i].setText(filename)
            self.Menu_File_Open_CommandFile.setObjectName(_fromUtf8("Menu_File_Open_CommandFileHistory_Command_" + str(i)))
            self.Menu_File_Open_CommandFileHistory_List[i].triggered.connect(lambda checked, filename=filename: self.ui_action_open_command_file(filename))
            self.Menu_File_Open.addAction(self.Menu_File_Open_CommandFileHistory_List[i])


    def ui_action_open_command_file(self, filename=""):
        """
        Open a new command file. Each line of the command file is a separate item in the Command_List QList Widget.

        Returns: None
        """
        # Clear the items from the current Command_List widget.
        self.commands_List.clear()

        if(filename == ""):
            # A browser window will appear to allow the user to browse to the desired command file. The absolute pathname
            # of the command file is added to the cmd_filepath variable.
            cmd_filepath = QtWidgets.QFileDialog.getOpenFileName()[0]
        else:
            cmd_filepath = filename

        try:
            # Open and read the command file.
            with open(cmd_filepath) as command_file:

                read_data = command_file.readlines()

                # Iterate over the lines of the command file.
                for line in read_data:
                    # Add the command string as an item to the Command_List widget.
                    # - whitespace on front side is OK
                    self.commands_List.addItem(line.rstrip())
        except Exception as e:
            #print(message)
            #logging.exception(message, e, exc_info=True)
            message = "Error opening file: " + cmd_filepath
            response = qt_util.new_message_box(
                QtWidgets.QMessageBox.Warning,
                QtWidgets.QMessageBox.Ok,
                message,
                "Open Command File")
            if response == QtWidgets.QMessageBox.Ok:
                return



        # Update the command count and Command_List label to show that new commands were added to the workflow.
        self.update_ui_status_commands()

        # Set this file path as the path to save if the user click "Save Commands ..."
        self.saved_file = cmd_filepath

        # Set the last command file
        self.command_file_path = cmd_filepath

        # Add command file to history
        self.app_session.push_history(cmd_filepath)

        # Update the recent files in the File... Open menu, for the next menu access
        self.ui_init_file_open_recent_files()


    def ui_action_save_commands(self):
        """
        Saves the commands to a previously saved file location (overwrite).

        Returns: None
        """

        # If there is not a previously saved file location, save the file with the save_command_as function.
        if self.saved_file is None:
            self.ui_action_save_commands_as()

        # If there is a previously saved file location, continue.
        else:

            # A list to hold each command as a separate string.
            list_of_cmds = []

            # Iterate over the items in the commands_List widget.
            for i in range(self.commands_List.count()):

                # Add the command string text ot the list_of_cmds list.
                list_of_cmds.append(self.commands_List.item(i).text())

            # Join all of the command strings together (separated by a line break).
            all_commands_string = '\n'.join(list_of_cmds)

            # Write the commands to the previously saved file location (overwrite).
            file = open(self.saved_file, 'w')
            file.write(all_commands_string)
            file.close()

            # Save the command file name for use as the working directory
            self.command_file_path = None

            # Update command file history list in GUI
            self.ui_init_file_open_recent_files()


    def ui_action_save_commands_as(self):
        """
        Saves the commands to a file.

        Returns: None
        """

        # TODO egiles 2018-16-05 Discuss with Steve about line breaks for Linux/Windows OS

        # A list to hold each command as a separate string.
        list_of_cmds = []

        # Iterate over the items in the commands_List widget.
        for i in range(self.commands_List.count()):

            # Add the command string text ot the list_of_cmds list.
            list_of_cmds.append(self.commands_List.item(i).text())

        # Join all of the command strings together (separated by a line break).
        all_commands_string = '\n'.join(list_of_cmds)

        # Create a QDialog window instance.
        d = QtWidgets.QDialog()

        # Open a browser for the user to select a location and filename to save the command file. Set the most recent
        # file save location.
        self.saved_file = QtWidgets.QFileDialog.getSaveFileName(d, 'Save Command File As')[0]

        # Write the commands to the file.
        file = open(self.saved_file, 'w')
        file.write(all_commands_string)
        file.close()

        # Save the command file name in the command file history
        self.app_session.push_history(self.saved_file)

        # Save the command file name for use as the working directory
        self.command_file_path = None

        # Update the recent files in the File... Open menu, for the next menu access
        self.ui_init_file_open_recent_files()

    def ui_action_view_documentation(self):
        """
        Opens the GeoProcessor user documentation in the user's default browser.

        Returns: None
        """

        # Open the GeoProcessor user documentation in the default browser (new window).
        webbrowser.open_new(self.user_doc_url)

    def update_results_count(self):
        """
        Update the labels of the Results' Tables to disply the total number of rows in each table and the total
        number of selected rows in each table.

        Returns: None
        """

    def update_ui_status(self):
        """
        Update the UI status by checking data and setting various status information.

        Returns: None
        """
        self.update_ui_status_commands()
        self.update_ui_status_results_geolayers()
        self.update_ui_status_results_maps()
        self.update_ui_status_results_output_files()
        self.update_ui_status_results_tables()

    def update_ui_status_commands(self):
        """
        Update the UI status for Commands area.
        Count the number of items (each item is a command string) in the Command_List widget. Update the total_commands
        class variable to the current number of command items in the Command_List widget. Update the selected_commands
        class variable to the current number of selected command items in the Command_List widget. Update the
        Command_List widget label to display the total and selected number of commands within the widget.

        Returns: None
        """
        # Count the number of items (each item is a command string) in the Command_List widget.
        total_commands = self.commands_List.count()

        # If there is at least one command in the Command_List widget, enable the "Run All Commands" button and the
        # "Clear Commands" button. If not, disable the "Run All Commands" button and the "Clear Commands" button.
        if total_commands > 0:
            self.commands_RunAllCommands_PushButton.setEnabled(True)
            self.commands_ClearCommands_PushButton.setEnabled(True)
        else:
            self.commands_RunAllCommands_PushButton.setEnabled(False)
            self.commands_ClearCommands_PushButton.setEnabled(False)

        # Count the number of selected items (each item is a command string) in the Command_List widget.
        selected_commands = len(self.commands_List.selectedItems())

        # If there is at least one selected command in the Command_List widget, enable the "Run Selected Commands"
        # button. If not, disable the "Run Selected Commands" button.
        if selected_commands > 0:
            self.commands_RunSelectedCommands_PushButton.setEnabled(True)
        else:
            self.commands_RunSelectedCommands_PushButton.setEnabled(False)

        # Update the Command_List widget label to display the total and selected number of commands.
        self.commands_GroupBox.setTitle(
            "Commands ({} commands, {} selected)".format(total_commands, selected_commands))

    def update_ui_status_results_geolayers(self):
        """
        Update the UI status for Results / GeoLayers area.

        Returns: None

        """
        # Count the total and selected number of rows within the GeoLayers table. Update the label to reflect counts.
        row_num = str(self.results_GeoLayers_Table.rowCount())
        # slct_row_num = str(len(set(index.row() for index in self.results_GeoLayers_Table.selectedIndexes())))
        slct_row_num = str(len(self.results_GeoLayers_Table.selectedIndexes()))
        self.results_GeoLayers_GroupBox.setTitle("GeoLayers ({} GeoLayers, {} selected)".format(row_num, slct_row_num))

    def update_ui_status_results_maps(self):
        """
        Update the UI status for Results / Maps area.

        Returns: None

        """
        # Count the total and selected number of rows within the Maps table. Update the label to reflect counts.
        row_num = str(self.results_Maps_Table.rowCount())
        # slct_row_num = str(len(set(index.row() for index in self.results_Maps_Table.selectedIndexes())))
        slct_row_num = str(len(self.results_Maps_Table.selectedIndexes()))
        self.results_Maps_GroupBox.setTitle("Maps ({} Maps, {} selected)".format(row_num, slct_row_num))

    def update_ui_status_results_output_files(self):
        """
        Update the UI status for Results / Output Files area.

        Returns: None

        """
        # Count the total and selected number of rows within the Output Files table. Update the label to reflect counts.
        row_num = str(self.results_OutputFiles_Table.rowCount())
        # slct_row_num = str(len(set(index.row() for index in self.results_OutputFiles_Table.selectedIndexes())))
        slct_row_num = str(len(self.results_OutputFiles_Table.selectedIndexes()))
        self.results_OutputFiles_GroupBox.setTitle(
            "Output Files ({} Output Files, {} selected)".format(row_num, slct_row_num))

    def update_ui_status_results_tables(self):
        """
        Update the UI status for Results / Tables area.

        Returns: None

        """
        # Count the total and selected number of rows within the Tables table. Update the label to reflect counts.
        row_num = str(self.results_Tables_Table.rowCount())
        slct_row_num = str(len(set(index.row() for index in self.results_Tables_Table.selectedIndexes())))
        self.results_Tables_GroupBox.setTitle("Tables ({} Tables, {} selected)".format(row_num, slct_row_num))


