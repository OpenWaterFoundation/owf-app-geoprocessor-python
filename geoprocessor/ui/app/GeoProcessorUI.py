import geoprocessor.util.io_util as io_util
import geoprocessor.util.command_util as command_util
from geoprocessor.ui.commands.layers.ReadGeoLayerFromGeoJSON_Editor import UiDialog as ReadGeoLayerFromGeoJSON_Editor
from PyQt5 import QtCore, QtGui, QtWidgets
import functools
import webbrowser
import geoprocessor.ui.util.config as config

# The following code is generated by QT Designer and returns a QString from UTF-8 string.
try:
    # _fromUtf8 = QtCore.QString.fromUtf8
    _fromUtf8 = lambda s: s
except AttributeError:
    def _fromUtf8(s):
        return s

# The following code is generated by QT Designer and does what?
try:
    _encoding = QtWidgets.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtWidgets.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtWidgets.QApplication.translate(context, text, disambig)

class GeoProcessorUI(QtWidgets.QMainWindow):  #, Ui_MainWindow):
    """
    Main GeoProcessor UI class, which instantiates a main application window that the user interacts with.
    This class is a child of the core Qt window classes.
    """

    def __init__(self, geoprocessor):

        # Emma way
        # super().__init__()
        QtWidgets.QMainWindow.__init__(self)
        #Ui_MainWindow.__init__(self)
        print('Inside GeoProcessorUI constructor, calling setupUi')
        # Call the setupUi funcation to instantiate UI components
        # - This is code that was originally auto-generated by QT Designer
        self.setupUi(self)

        # The count of commands within the commands_List widget (total).
        self.total_commands = 0

        # The count of commands within the commands_List widget (selected).
        self.selected_commands = 0

        # Ingest the GeoProcessor object.
        self.gp = geoprocessor

        # The most recent file save location.
        self.saved_file = None

        # The URL to the user documentation main page
        self.user_doc_url = config.user_doc_url

        # All event handlers and connections are configured in the setupUi*() functions grouped by component.

    def clear_commands_from_button(self):
        """
        Clear one or more of the commands from the Command List widget.

        Return: None
        """

        # If at least one command is selected, remove only the selected commands.
        if self.selected_commands > 0:

            # Set the message box message depending on if 1 item is selected or more than 1 items are selcted.
            if self.selected_commands == 1:
                message_box_message = "Do you want to delete the 1 selected command?"
            else:
                message_box_message = "Do you want to delete the {} selected commands?".format(self.selected_commands)

            # Open a message box to confirm with the user that they want to delete the selected commands.
            response = self.new_message_box("question", "yes,no", message_box_message, "Clear Commands")

            # If the user confirms that they want to delete the selected commands, continue. Otherwise, pass.
            if response.upper() == "YES":

                # Iterate over and remove each selected item (command).
                for selected_item in self.commands_List.selectedItems():
                    self.commands_List.takeItem(self.commands_List.row(selected_item))

        # If no commands are selected, remove all commands.
        else:

            # Open a message box to confirm with the user that they want to delete all of the commands.
            response = self.new_message_box("question", "yes,no", "Do you want to delete all of the commands?",
                                            "Clear Commands")

            # If the user confirms that they want to delete all of the commands, continue. Otherwise, pass.
            if response.upper() == "YES":

                # Iterate over and remove all of the items (commands).
                while self.commands_List.count() > 0:
                    self.commands_List.takeItem(0)

        # Update the command count and Command_List label to show that commands were deleted.
        self.update_command_count()

    def clear_command_from_rightclick(self):
        """
        Clear the right-clicked command from the Command List widget.

        Return: None
        """

        # Open a message box to confirm with the user that they want to delete the command.
        response = self.new_message_box("question", "yes,no", "Do you want to delete this command?", "Clear Commands")

        # If the user confirms that they want to delete the command, continue. Otherwise, pass.
        if response.upper() == "YES":

            # Get the index of the right-clicked command (item) and remove it from the Command_List widget.
            index_of_item_to_remove = self.commands_List.currentRow()
            self.commands_List.takeItem(index_of_item_to_remove)

        # Update the command count and Command_List label to show that commands were deleted.
        self.update_command_count()

    def edit_command_editor(self):
        """
        Opens a dialog box that allows users to edit existing commands.

        Return: None
        """

        # Get the command line string of the right-clicked item in the commands_List widget.
        cmd_line_string = self.commands_List.currentItem().text()

        # Get the command name of the command line string. All text before the first open parenthesis.
        command_name = command_util.parse_command_name_from_command_string(cmd_line_string)

        # Get the parameter string of the command line string. All text inside parenthesis.
        parameter_string = command_util.parse_parameter_string_from_command_string(cmd_line_string)

        # Convert the parameter string into a list of key value pairs. [ParameterName1=ParameterValue1, ... ]
        parameter_key_values = command_util.parse_parameter_string_into_key_value_pairs(parameter_string)

        # Convert hte list of key value pairs into a parameter dictionary. {ParameterName1: ParameterValue1}
        input_parameter_dictionary = command_util.parse_key_value_pairs_into_dictionary(parameter_key_values)

        # Create a QDialog window instance.
        d = QtWidgets.QDialog()

        # Create the dialog design instance for the specific input command.
        ui = self.new_command_obj(command_name)

        # If there are not parameters, set the input_parameter_dictionary to the command_parameter_values.
        if not input_parameter_dictionary:
            input_parameter_dictionary = ui.command_parameter_values

        # Apply the command-specific dialog design to the QDialog window.
        ui.setupUi(d)

        # Update the dialog window with the parameter values included in the cmd_line_string.
        # Iterate over the dictionary entries of the input_parameter_dictionary.
        # Each entry represents a parameter.
        # Key: parameter name
        # Value: existing parameter value
        for input_parameter_name, input_parameter_value in input_parameter_dictionary.items():

            # Iterate over the dictionary entries of the default command_parameter_dictionary within the dialog design
            # instance object.
            # Each entry represents a parameter.
            # Key: parameter name
            # Value: default parameter value
            for default_parameter_name, default_parameter_value in ui.command_parameter_values.items():

                # If a command parameter is NOT set to default in the cmd_line_string, set the
                # parameter value within the dialog design instance object to the parameter value indicated by the
                # cmd_line_string.
                if input_parameter_name == default_parameter_name:
                    ui.command_parameter_values[default_parameter_name] = input_parameter_value

        # Update the dialog window with the parameter values from the command line string.
        ui.refresh()

        # If the "OK" button is clicked within the dialog window, continue.
        # Else, if the "Cancel" button is clicked, do nothing.
        if d.exec_():
            # Get the index of the selected command (item).
            index = self.commands_List.currentRow()

            # Remove the original command (item) from the Command_List widget.
            self.commands_List.takeItem(index)

            # Get the updated command string from the dialog window.
            command_string = ui.CommandDisplay_View_TextBrowser.toPlainText()

            # Add the command string to the Command_List widget in the same location as the previous command item.
            self.commands_List.insertItem(index, command_string)

            # Update the command count and Command_List label to show that a command was added to the workflow.
            self.update_command_count()

    def new_command_editor(self, command_name):
        """
        Opens the dialog window for the selected command. If the users clicks "OK" within the dialog window, the
        command string (with the desired parameter values) is added to the Command_List widget within the Main Window
        user interface. Other UI components are also updated - including the total and selected command count, the
        Command_List Widget Label, and the GeoProcessor's list of commands.

        Args:
            command_name (str): the name of the command

        Returns: None
        """

        # Create a QDialog window instance.
        d = QtWidgets.QDialog()

        # Create the dialog design instance for the specific input command.
        ui = self.new_command_obj(command_name)

        # Apply the command-specific dialog design to the QDialog window.
        ui.setupUi(d)

        # If the "OK" button is clicked within the dialog window, continue.
        # Else, if the "Cancel" button is clicked, do nothing.
        if d.exec_():

            # Check if all of the required parameters are filled. If so, add the command to the Command_List widget.
            if ui.are_required_parameters_specified(ui.ui_commandparameters):

                # Get the command string from the dialog window.
                command_string = ui.CommandDisplay_View_TextBrowser.toPlainText()

                # Add the command string to the Command_List widget.
                self.commands_List.addItem(command_string)

                # Update the command count and Command_List label to show that a command was added to the workflow.
                self.update_command_count()

            else:

                # Display a message box to inform user that a required parameter is missing.
                value = self.new_message_box("CRITICAL", "YES,NO",
                                             "One or more of the required parameters is not filled out. "
                                             "Return to the dialog box?", "Required parameter(s) not met.")

                # If the user decides to return to the dialog box, display the dialog box with the original values.
                if value.upper() == "YES":
                    # TODO need to figure out how to go back to the original dialog box.
                    pass

                # Delete the original dialog box and return to the main window.
                else:
                    pass

    @staticmethod
    def new_command_obj(command_name):
        if command_name.upper() == "READGEOLAYERFROMGEOJSON":
            return ReadGeoLayerFromGeoJSON_Editor()
        else:
            return None

    @staticmethod
    def new_message_box(message_type, standard_buttons, message, title):
        """
        Create and execute a message box.
        REF: https://www.tutorialspoint.com/pyqt/pyqt_qmessagebox.htm

        Args:
            message_type (str): the type of message box. Choose one of the following (question, information, warning,
                critical)
            standard_buttons (str): the buttons to include in the message box (available options are in the buttons_dic
                dictionary. More options can be added to the dictionary as needed.
            message (str): a message to display in the message box
            title (str) a title for the message box. Appears in the top window bar.

        Return: The clicked button name. See the button_value_dic for more information.
        """

        # Relates the input variable TYPE to the appropriate QtGui Icon for the message box.
        icon_dic = {"QUESTION": QtWidgets.QMessageBox.Question,
                    "INFORMATION": QtWidgets.QMessageBox.Information,
                    "WARNING": QtWidgets.QMessageBox.Warning,
                    "CRITICAL": QtWidgets.QMessageBox.Critical}

        # Relates the input variable STANDARD_BUTTONS to the appropriate QtGui buttons for the message box.
        buttons_dic = {"YES,NO": QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No}

        # Relates the enumerated clicked button value to the clicked button name.
        # REF: http://ftp.ics.uci.edu/pub/centos0/ics-custom-build/BUILD/PyQt-x11-gpl-4.7.2/doc/html/
        # qdialogbuttonbox.html#StandardButton-enum
        button_value_dic = {16384: "Yes",
                            65536: "No"}

        # Create the Message Box object.
        msg = QtWidgets.QMessageBox()

        # Set the Message Box icon.
        msg.setIcon(icon_dic[message_type.upper()])

        # Set the Message Box message text.
        msg.setText(message)

        # Set the Message Box title text.
        msg.setWindowTitle(title)

        # Set the Message Box standard buttons.
        msg.setStandardButtons(buttons_dic[standard_buttons.upper()])

        # Execute the Message Box and retrieve the clicked button enumerator.
        btn_value = msg.exec_()

        # Return the clicked button common name.
        return button_value_dic[btn_value]

    def open_command_file(self):
        """
        Opens a new command file. Each line of the command file is a separate item in the Command_List QList Widget.

        Returns: None
        """

        # Clear the items from the current Command_List widget.
        self.commands_List.clear()

        # A browser window will appear to allow the user to browse to the desired command file. The absolute pathname
        # of the command file is added to the cmd_filepath variable.
        cmd_filepath = QtWidgets.QFileDialog.getOpenFileName()[0]

        # Open and read the command file.
        with open(cmd_filepath) as command_file:

            read_data = command_file.readlines()

            # Iterate over the lines of the command file.
            for line in read_data:

                # Strip the line of any excess whitespace and add it as an item to the Command_List widget.
                self.commands_List.addItem(line.strip())

        # Update the command count and Command_List label to show that new commands were added to the workflow.
        self.update_command_count()

        # Set this file path as the path to save if the user click "Save Commands ..."
        self.saved_file = cmd_filepath

    def open_command_list_right_click_menu(self, q_pos):
        """
        Open the Command_List widget right-click menu.
        REF: https://stackoverflow.com/questions/31380457/add-right-click-functionality-to-listwidget-in-pyqt4?
        utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa

        Arg:
            q_pos: The position of the right-click. Updated automatically within interface. Do not need to manually
                pass a value to this variable. Used to determine where to display the popup menu.

        Return: None
        """

        # Create the Qt Menu object.
        self.rightClickMenu = QtWidgets.QMenu()

        # Add the menu options to the right-click menu.
        menu_item_edit_command = self.rightClickMenu.addAction("Edit Command")
        menu_item_delete_command = self.rightClickMenu.addAction("Delete Command")

        # Connect the menu options to the appropriate actions.
        menu_item_edit_command.triggered.connect(self.edit_command_editor)
        menu_item_delete_command.triggered.connect(self.clear_command_from_rightclick)

        # Set the position on the right-click menu to appear at the click point.
        parent_pos = self.commands_List.mapToGlobal(QtCore.QPoint(0, 0))
        self.rightClickMenu.move(parent_pos + q_pos)

        # Display the right-click menu.
        self.rightClickMenu.show()

    def populate_results_tables(self):
        """
        Populates the Results tables of the UI to reflect the existing geolayers, tables, maps, output files and
        properties created/within the GeoProcessor.

        Return: None
        """

        # Remove items from the Results GeoLayers table (from a previous run).
        self.results_GeoLayers_Table.setRowCount(0)

        # Remove items from the Results Tables table (from a previous run).
        self.results_Tables_Table.setRowCount(0)

        # Remove items from the Results Maps table (from a previous run).
        self.results_Maps_Table.setRowCount(0)

        # Remove items from the Results Output Files table (from a previous run).
        self.results_OutputFiles_Table.setRowCount(0)

        # Remove items from the Results Properties table (from a previous run).
        self.results_Properties_Table.setRowCount(0)

        # Populate the Results GeoLayers Table.
        # Iterate through all of the GeoLayer objects in the GeoProcessor.
        for geolayer in self.gp.geolayers:

            # Get the index of the next available row in the table. Add a new row to the table.
            new_row_index = self.results_GeoLayers_Table.rowCount()
            self.results_GeoLayers_Table.insertRow(new_row_index)

            # Retrieve the GeoLayer's GeoLayer ID and set as the attribute for the GeoLayer ID column.
            self.results_GeoLayers_Table.setItem(new_row_index, 0, QtWidgets.QTableWidgetItem(geolayer.id))

            # Retrieve the GeoLayer's geometry and set as the attribute for the Geometry column.
            self.results_GeoLayers_Table.setItem(new_row_index, 1, QtWidgets.QTableWidgetItem(geolayer.get_geometry()))

            # Retrieve the number of features within the GeoLayer and set as the attribute for the Feature Count column.
            self.results_GeoLayers_Table.setItem(new_row_index, 2,
                                                 QtWidgets.QTableWidgetItem(str(geolayer.get_feature_count())))

            # Retrieve the GeoLayer's CRS and set as the attribute for the Coordinate Reference System column.
            self.results_GeoLayers_Table.setItem(new_row_index, 3, QtWidgets.QTableWidgetItem(geolayer.get_crs()))

        # Populate the Results Tables Table.
        # Iterate through all of the Table objects in the GeoProcessor.
        for table in self.gp.tables:

            # Get the index of the next available row in the table. Add a new row to the table.
            new_row_index = self.results_Tables_Table.rowCount()
            self.results_Tables_Table.insertRow(new_row_index)

            # Retrieve the Tables's Table ID and set as the attribute for the Table ID column.
            self.results_Tables_Table.setItem(new_row_index, 0, QtWidgets.QTableWidgetItem(table.id))

            # Retrieve the number of columns in the Table and set as the attribute for the Column Count column.
            self.results_Tables_Table.setItem(new_row_index, 1,
                                              QtWidgets.QTableWidgetItem(str(table.count(returnCol=True))))

            # Retrieve the number of rows in the Table and set as the attribute for the Row Count column.
            self.results_Tables_Table.setItem(new_row_index, 2,
                                              QtWidgets.QTableWidgetItem(str(table.count(returnCol=False))))

        # TODO egiles 2018-05-14 Populate the Results Maps Table

        # Populate the Results Output Files Table
        # Iterate through all of the Output Files in the GeoProcessor.
        for output_file in self.gp.output_files:

            # Get the index of the next available row in the table. Add a new row to the table.
            new_row_index = self.results_OutputFiles_Table.rowCount()
            self.results_OutputFiles_Table.insertRow(new_row_index)

            # Retrieve the absolute pathname of the output file and set as the attribute for the Output File column.
            self.results_OutputFiles_Table.setItem(new_row_index, 0, QtWidgets.QTableWidgetItem(output_file))

            # Get the extension of the output file.
            output_file_ext = io_util.get_extension(output_file)

            # A dictionary that relates common file extensions to the appropriate file name.
            extension_dictionary = {'.xlsx': 'Microsoft Excel Open XML Format Spreadsheet',
                                    '.geojson': 'GeoJSON',
                                    '.xls': 'Microsoft Excel 97-2003 Worksheet'}

            # Retrieve the output file type and set as the attribute for the File Type column. If h
            if output_file_ext in extension_dictionary.keys():
                self.results_OutputFiles_Table.setItem(new_row_index, 1,
                                                       QtWidgets.QTableWidgetItem(
                                                           extension_dictionary[output_file_ext]))
            else:
                self.results_OutputFiles_Table.setItem(new_row_index, 1,
                                                       QtWidgets.QTableWidgetItem("Unknown"))

        # Populate the Results Properties Table.
        # Iterate through all of the properties in the GeoProcessor.
        for prop_name, prop_value in self.gp.properties.items():

            # Get the index of the next available row in the table. Add a new row to the table.
            new_row_index = self.results_Properties_Table.rowCount()
            self.results_Properties_Table.insertRow(new_row_index)

            # Set the property name as the attribute for the Property Name column.
            self.results_Properties_Table.setItem(new_row_index, 0, QtWidgets.QTableWidgetItem(prop_name))

            # Set the property value as the attribute for the Property Value column.
            self.results_Properties_Table.setItem(new_row_index, 1, QtWidgets.QTableWidgetItem(prop_value))

        # Update the results count and results' tables' labels to show that the results were populated.
        self.update_results_count()

    def retranslateUi(self, MainWindow):
        """
        This function apparently translates the generic Qt Designer component properties that are tied to
        names like button1 to more specific properties, if necessary.
        Some properties are set in the setupUi function and do not need to be reset.
        This provides some level of abstraction.

        Args:
            MainWindow:

        Returns:

        """
        print("Entering retranslateUi")
        # Comment out code as it is moved from this method to the main setupUi() function
        ##MainWindow.setWindowTitle(_translate("MainWindow", "GeoProcessor", None))
        ##self.commands_GroupBox.setTitle(
        ##    _translate("MainWindow",
        ##               "Commands (0 commands, 0  selected, 0 with failures, 0 with warnings)", None))
        ##self.commands_RunAllCommands_PushButton.setText(_translate("MainWindow", "  Run All Commands  ", None))
        ##self.commands_ClearCommands_PushButton.setText(_translate("MainWindow", "  Clear Commands  ", None))
        ##self.commands_RunSelectedCommands_PushButton.setText(_translate("MainWindow", "  Run Selected Commands  ", None))

        ##self.results_GroupBox.setTitle(_translate("MainWindow", "Results", None))
        ##self.results_GeoLayers_GroupBox.setTitle(_translate("MainWindow", "GeoLayers (0 GeoLayers, 0 selected)", None))
        ##item = self.results_GeoLayers_Table.horizontalHeaderItem(0)
        ##item.setText(_translate("MainWindow", "GeoLayer ID", None))
        ##item = self.results_GeoLayers_Table.horizontalHeaderItem(1)
        ##item.setText(_translate("MainWindow", "Geometry", None))
        ##item = self.results_GeoLayers_Table.horizontalHeaderItem(2)
        ##item.setText(_translate("MainWindow", "Feature Count", None))
        ##item = self.results_GeoLayers_Table.horizontalHeaderItem(3)
        ##item.setText(_translate("MainWindow", "Coordinate Reference System", None))
        ##item = self.results_GeoLayers_Table.horizontalHeaderItem(4)
        ##item.setText(_translate("MainWindow", "Command Reference", None))
        ##self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_GeoLayers_Tab),
                                           ##_translate("MainWindow", "GeoLayers", None))
        ##self.results_Tables_GroupBox.setTitle(_translate("MainWindow", "Tables (0 Tables, 0 selected)", None))
        ##item = self.results_Tables_Table.horizontalHeaderItem(0)
        ##item.setText(_translate("MainWindow", "Table ID", None))
        ##item = self.results_Tables_Table.horizontalHeaderItem(1)
        ##item.setText(_translate("MainWindow", "Column Count", None))
        ##item = self.results_Tables_Table.horizontalHeaderItem(2)
        ##item.setText(_translate("MainWindow", "Row Count", None))
        ##item = self.results_Tables_Table.horizontalHeaderItem(3)
        ##item.setText(_translate("MainWindow", "Command Reference", None))
        ##self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_Tables_Tab),
                                           ##_translate("MainWindow", "Tables", None))
        ##self.results_Maps_GroupBox.setTitle(_translate("MainWindow", "Maps (0 Maps, 0 selected)", None))
        ##item = self.results_Maps_Table.horizontalHeaderItem(0)
        ##item.setText(_translate("MainWindow", "Map ID", None))
        ##item = self.results_Maps_Table.horizontalHeaderItem(1)
        ##item.setText(_translate("MainWindow", "Included GeoLayers", None))
        ##item = self.results_Maps_Table.horizontalHeaderItem(2)
        ##item.setText(_translate("MainWindow", "Coordinate Reference System", None))
        ##item = self.results_Maps_Table.horizontalHeaderItem(3)
        ##item.setText(_translate("MainWindow", "Command Reference", None))
        ##self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_Maps_Tab),
                                           ##_translate("MainWindow", "Maps", None))
        ##self.results_OutputFiles_GroupBox.setTitle(
            ##_translate("MainWindow", "Output Files (0 Output Files, 0 selected)", None))
        ##item = self.results_OutputFiles_Table.horizontalHeaderItem(0)
        ##item.setText(_translate("MainWindow", "Output File ", None))
        ##item = self.results_OutputFiles_Table.horizontalHeaderItem(1)
        ##item.setText(_translate("MainWindow", "File Type", None))
        ##item = self.results_OutputFiles_Table.horizontalHeaderItem(2)
        ##item.setText(_translate("MainWindow", "Command Reference", None))
        ##self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_OutputFiles_Tab),
                                           ##_translate("MainWindow", "Output Files", None))
        ##self.results_Properties_GroupBox.setTitle(
            ##_translate("MainWindow", "Processor properties control processing and can be used in some command " +
            ##"parameters using ${Property} notation (see command documentation). ", None))
        ##item = self.results_Properties_Table.horizontalHeaderItem(0)
        ##item.setText(_translate("MainWindow", "Property Name", None))
        ##item = self.results_Properties_Table.horizontalHeaderItem(1)
        ##item.setText(_translate("MainWindow", "Property Value", None))
        ##self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_Properties_Tab),
                                           ##_translate("MainWindow", "Properties", None))

        ##self.status_CurrentCommand_Label.setText(_translate("MainWindow", "Current Command Status", None))
        ##self.status_Command_Workflow_status_Label.setText(_translate("MainWindow", "Command Workflow Status", None))
        ##self.status_Label.setText(_translate("MainWindow", "Ready", None))
        #self.groupBox.setTitle(_translate("MainWindow", "Catalog", None))
        #self.pushButton.setText(_translate("MainWindow", "Add to Catalog", None))
        self.Menu_File.setTitle(_translate("MainWindow", "File", None))
        self.Menu_File_New.setTitle(_translate("MainWindow", "New", None))
        self.Menu_File_Open.setTitle(_translate("MainWindow", "Open", None))
        self.Menu_File_Save.setTitle(_translate("MainWindow", "Save", None))
        self.Menu_Commands.setTitle(_translate("MainWindow", "Commands", None))
        self.Menu_Commands_Tables.setTitle(_translate("MainWindow", "Tables", None))
        self.Menu_Commands_GeoLayers.setTitle(_translate("MainWindow", "GeoLayers", None))
        self.Commands_GeoLayers_Read_2.setTitle(_translate("MainWindow", "Read", None))
        self.Menu_Commands_Comments.setTitle(_translate("MainWindow", "General - Comments", None))
        self.Menu_Help.setTitle(_translate("MainWindow", "Help", None))
        self.Menu_Print.setText(_translate("MainWindow", "Print", None))
        self.Menu_Properties.setText(_translate("MainWindow", "Properties", None))
        self.File_SetWorkingDirectory.setText(_translate("MainWindow", "Set Working Directory ...", None))
        self.actionExit.setText(_translate("MainWindow", "Exit", None))
        self.File_New_CommandFile.setText(_translate("MainWindow", "Command File", None))
        self.File_Open_CommandFile.setText(_translate("MainWindow", "Command File ...", None))
        self.File_Save_Commands.setText(_translate("MainWindow", "Commands ...", None))
        self.File_Save_CommandsAs.setText(_translate("MainWindow", "Commands as ...", None))
        self.actionRead.setText(_translate("MainWindow", "Read", None))
        self.actionWrite.setText(_translate("MainWindow", "Write", None))
        self.Commands_Tables_Read.setText(_translate("MainWindow", "Read", None))
        self.Commands_Tables_Process.setText(_translate("MainWindow", "Process", None))
        self.Commands_Tables_Write.setText(_translate("MainWindow", "Write", None))
        self.Commands_GeoLayers_Process.setText(_translate("MainWindow", "Process", None))
        self.Commands_GeoLayers_Write.setText(_translate("MainWindow", "Write", None))
        self.Commands_Comments_Single.setText(
            _translate("MainWindow", "# comments <enter 1+ comments each starting with #>", None))
        self.Commands_Comments_MultipleStart.setText(
            _translate("MainWindow", "/* <start multi-line comment section> ", None))
        self.Commands_Comments_MultipleEnd.setText(
            _translate("MainWindow", "*/ <end multi-line comment section>", None))
        self.Commands_Comments_DisableTest.setText(
            _translate("MainWindow", "#@enabled False <disables the test>", None))
        self.Commands_Comments_ExpectedStatusFail.setText(
            _translate("MainWindow", "#@expectedStatus Failure <used to test commands>", None))
        self.Commands_Comments_ExpectedStatusWarn.setText(
            _translate("MainWindow", "#@expectedStatus Warning <used to test commands>", None))
        self.GeoLayers_Read_ReadGeoLayerFromGeoJSON.setText(
            _translate("MainWindow", "ReadGeoLayerFromGeoJSON <reads a GeoLayer from a .geojson file>", None))
        self.GeoLayers_Read_ReadGeoLayerFromShapefile.setText(
            _translate("MainWindow", "ReadGeoLayerFromShapefile <reads a GeoLayer from a shapefile>", None))
        self.GeoLayers_Read_ReadGeoLayersFromFGDB.setText(
            _translate("MainWindow",
                       "ReadGeoLayersFromFGDB <reads 1+ GeoLayer(s) from the feature classes of a file geodatabase>",
                       None))
        self.GeoLayers_Read_ReadGeoLayersFromFolder.setText(
            _translate("MainWindow", "ReadGeoLayersFromFolder <reads 1+ GeoLayer(s) from a local folder>", None))
        self.Menu_Help_About.setText(_translate("MainWindow", "About GeoProcessor", None))
        self.Help_ViewDocumentation.setText(_translate("MainWindow", "View Documentation", None))
        print("Leaving retranslateUi")

    def run_commands(self, selected=False):
        """
        Runs the commands from the Command_List widget within the GeoProcessor.

        Args:
            selected: Boolean. If FALSE, all commands within Command_List widget are processed. If TRUE, only selected
            commands within Command_List widget are processed.

        Returns:
            None
        """

        # If ALL of the commands should be run, continue.
        if not selected:

            # Update the GeoProcessor's list of commands to include ALL of the commands in the Command_List widget.
            self.update_gp_command_list()

        # If only the SELECTED commands should be run, continue.
        else:

            # Update the GeoProcessor's list of commands to include only the SELECTED commands in the Command_List
            # widget.
            self.update_gp_command_list(selected=True)

        # Runs the geoprocessor's run_commands function to run the existing commands that exist in the processor.
        self.gp.run_commands()

        # After commands have been run, update the UI Results section to reflect the output & intermediary products.
        self.populate_results_tables()

    def save_commands(self):
        """
        Saves the commands to a previously saved file location (overwrite).

        Return: None
        """

        # If there is not a previously saved file location, save the file with the save_command_as function.
        if self.saved_file is None:
            self.save_commands_as()

        # If there is a previously saved file location, continue.
        else:

            # A list to hold each command as a separate string.
            list_of_cmds = []

            # Iterate over the items in the commands_List widget.
            for i in range(self.commands_List.count()):

                # Add the command string text ot the list_of_cmds list.
                list_of_cmds.append(self.commands_List.item(i).text())

            # Join all of the command strings together (separated by a line break).
            all_commands_string = '\n'.join(list_of_cmds)

            # Write the commands to the previously saved file location (overwrite).
            file = open(self.saved_file, 'w')
            file.write(all_commands_string)
            file.close()

    def save_commands_as(self):
        """
        Saves the commands to a file.

        Return: None
        """

        # TODO egiles 2018-16-05 Discuss with Steve about line breaks for Linux/Windows OS

        # A list to hold each command as a separate string.
        list_of_cmds = []

        # Iterate over the items in the commands_List widget.
        for i in range(self.commands_List.count()):

            # Add the command string text ot the list_of_cmds list.
            list_of_cmds.append(self.commands_List.item(i).text())

        # Join all of the command strings together (separated by a line break).
        all_commands_string = '\n'.join(list_of_cmds)

        # Create a QDialog window instance.
        d = QtWidgets.QDialog()

        # Open a browser for the user to select a location and filename to save the command file. Set the most recent
        # file save location.
        self.saved_file = QtWidgets.QFileDialog.getSaveFileName(d, 'Save Command File As')[0]

        # Write the commands to the file.
        file = open(self.saved_file, 'w')
        file.write(all_commands_string)
        file.close()

    def setupUi(self, MainWindow):
        """
        Set up the user interface.
        This code was included from GeoProcessor_Design.py, which was generated by QT Designer by converting
        its '.ui' file to '.py'.
        However, subsequent customization has edited this code directly without reprocessing the '.ui' file,
        and this will continue into the future.

        Args:
            MainWindow: the main window that will be initialized with components (same as self in this case).
        """
        print("Entering setupUi")
        # Main window that will contain all other components
        MainWindow.setObjectName(_fromUtf8("MainWindow"))
        MainWindow.setWindowTitle("GeoProcessor")
        MainWindow.resize(1038, 834)
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("MS Shell Dlg 2"))
        MainWindow.setFont(font)
        MainWindow.setWindowOpacity(1.0)

        # Central widget is the place where the main content is placed
        # - See http://doc.qt.io/qt-5/qmainwindow.html
        # - Use 6 columns for grid layout
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.centralwidget_GridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.centralwidget_GridLayout.setObjectName(_fromUtf8("centralwidget_GridLayout"))

        # Row position within central widget grid layout
        # - will be incremented by one before adding a component so first use will set to zero
        y_centralwidget = -1

        # Set up the Catalog area
        #y_centralwidget = y_centralwidget + 1
        #self.setupUiCatalog(y_centralwidget)

        # Set up the Commands area
        y_centralwidget = y_centralwidget + 1
        self.setupUiCommands(y_centralwidget)

        # Setup the Results components
        y_centralwidget = y_centralwidget + 1
        self.setupUiResults(y_centralwidget)

        # Setup the Status components
        y_centralwidget = y_centralwidget + 1
        self.setupUiStatus(y_centralwidget)

        # Now set the central widget, which will have been populated with the above components
        MainWindow.setCentralWidget(self.centralwidget)

        # Setup the Menu components
        self.setupUiMenus(MainWindow)

        # Call retranslateUi to set additional properties more specifically once initial setup is complete
        # - Actually, no need to call anymore since settings are in the code
        #self.retranslateUi(MainWindow)
        # Triggering the exit event on the main window closes the window.
        self.actionExit.triggered.connect(MainWindow.close)
        # QtCore.QObject.connect(self.actionExit, QtCore.SIGNAL(_fromUtf8("triggered()")), MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        print("Leaving setupUi")

    def setupUiCatalog(self, y_centralwidget):
        """
        Set up the Catalog area of the UI.

        Args:
            y_centralwidget:  Row position in the central widget to add this component.

        Returns:  None
        """
        # Catalog area is in the top of the central widget
        # - enable this area later since don't currenlty have browser for layers or datastores
        # - double hash below is what is commented out
        self.catalog_GroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.catalog_GroupBox.setObjectName(_fromUtf8("catalog_GroupBox"))
        self.catalog_GridLayout = QtWidgets.QGridLayout(self.catalog_GroupBox)
        self.catalog_GridLayout.setObjectName(_fromUtf8("catalog_GridLayout"))
        self.pushButton = QtWidgets.QPushButton(self.catalog_GroupBox)
        self.pushButton.setObjectName(_fromUtf8("pushButton"))
        self.catalog_GridLayout.addWidget(self.pushButton, 0, 1, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.catalog_GroupBox)
        self.lineEdit.setObjectName(_fromUtf8("lineEdit"))
        self.catalog_GridLayout.addWidget(self.lineEdit, 0, 0, 1, 1)
        self.listWidget = QtWidgets.QListWidget(self.catalog_GroupBox)
        self.listWidget.setObjectName(_fromUtf8("listWidget"))
        self.catalog_GridLayout.addWidget(self.listWidget, 1, 0, 1, 2)
        self.catalog_GroupBox.setTitle("Catalog")
        self.centralwidget_GridLayout.addWidget(self.catalog_GroupBox, y_centralwidget, 0, 1, 6)

    def setupUiCommands(self, y_centralwidget):
        """
        Set up the Commands area of the UI.

        Args:
            y_centralwidget:  Row position in the central widget to add this component.

        Returns:  None
        """
        # Commands area is in the middle of the central widget
        # First the main commands area with border
        self.commands_GroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.commands_GroupBox.setObjectName(_fromUtf8("commands_GroupBox"))
        self.commands_GroupBox.setTitle("Commands (0 commands, 0  selected, 0 with failures, 0 with warnings)")
        self.commands_GridLayout = QtWidgets.QGridLayout(self.commands_GroupBox)
        y_commands = -1  # Row position within grid layout for commands area
        self.commands_GridLayout.setObjectName(_fromUtf8("commands_GridLayout"))

        # Commands area list
        self.commands_List = QtWidgets.QListWidget(self.commands_GroupBox)
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("MS Shell Dlg 2"))
        self.commands_List.setFont(font)
        self.commands_List.setAutoScroll(True)
        self.commands_List.setDragDropOverwriteMode(False)
        self.commands_List.setAlternatingRowColors(True)
        self.commands_List.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.commands_List.setProperty("isWrapping", False)
        self.commands_List.setLayoutMode(QtWidgets.QListView.SinglePass)
        self.commands_List.setWordWrap(True)
        self.commands_List.setSelectionRectVisible(False)
        self.commands_List.setObjectName(_fromUtf8("commands_List"))
        self.commands_List.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        y_commands = y_commands + 1
        self.commands_GridLayout.addWidget(self.commands_List, y_commands, 0, 1, 4)

        # Commands area buttons under the list
        self.commands_RunSelectedCommands_PushButton = QtWidgets.QPushButton(self.commands_GroupBox)
        self.commands_RunSelectedCommands_PushButton.setEnabled(False)
        self.commands_RunSelectedCommands_PushButton.setDefault(False)
        self.commands_RunSelectedCommands_PushButton.setFlat(False)
        self.commands_RunSelectedCommands_PushButton.setObjectName(_fromUtf8("commands_RunSelectedCommands_PushButton"))
        self.commands_RunSelectedCommands_PushButton.setText("  Run Selected Commands  ")
        y_commands = y_commands + 1
        self.commands_GridLayout.addWidget(self.commands_RunSelectedCommands_PushButton, y_commands, 0, 1, 1)

        self.commands_RunAllCommands_PushButton = QtWidgets.QPushButton(self.commands_GroupBox)
        self.commands_RunAllCommands_PushButton.setEnabled(False)
        self.commands_RunAllCommands_PushButton.setObjectName(_fromUtf8("commands_RunAllCommands_PushButton"))
        self.commands_RunAllCommands_PushButton.setText("  Run All Commands  ")
        self.commands_GridLayout.addWidget(self.commands_RunAllCommands_PushButton, y_commands, 1, 1, 1)

        # Spacer makes sure that buttons on left and right are correctly positioned
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.commands_GridLayout.addItem(spacerItem, y_commands, 2, 1, 1)

        self.commands_ClearCommands_PushButton = QtWidgets.QPushButton(self.commands_GroupBox)
        self.commands_ClearCommands_PushButton.setEnabled(False)
        self.commands_ClearCommands_PushButton.setObjectName(_fromUtf8("commands_ClearCommands_PushButton"))
        self.commands_ClearCommands_PushButton.setText("  Clear Commands  ")
        self.commands_GridLayout.addWidget(self.commands_ClearCommands_PushButton, y_commands, 3, 1, 1)

        # Add the commands to the central widget
        self.centralwidget_GridLayout.addWidget(self.commands_GroupBox, y_centralwidget, 0, 1, 6)

        # Define listeners to handle events
        # Listen for a change in item selection within the commands_List widget.
        self.commands_List.itemSelectionChanged.connect(self.update_command_count)

        # Connect the Run All Commands button.
        self.commands_RunAllCommands_PushButton.clicked.connect(self.run_commands, False)
        # Connect the Clear Commands button.
        self.commands_ClearCommands_PushButton.clicked.connect(self.clear_commands_from_button)
        # Connect the Run Selected Commands button.
        self.commands_RunSelectedCommands_PushButton.clicked.connect(functools.partial(self.run_commands, True))

        # Other connections
        # Connect right-click of commands_List widget item.
        self.commands_List.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.commands_List.customContextMenuRequested.connect(self.open_command_list_right_click_menu)

    def setupUiMenus(self, MainWindow):
        """
        Set up the Menus for the UI.

        Args:
            MainWindow: the main window that will be initialized with components (same as self in this case).

        Returns:  None
        """
        # Menu bar for the application
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1038, 20))
        self.menubar.setObjectName(_fromUtf8("menubar"))
        self.Menu_File = QtWidgets.QMenu(self.menubar)
        self.Menu_File.setObjectName(_fromUtf8("Menu_File"))
        self.Menu_File_New = QtWidgets.QMenu(self.Menu_File)
        self.Menu_File_New.setObjectName(_fromUtf8("Menu_File_New"))
        self.Menu_File_Open = QtWidgets.QMenu(self.Menu_File)
        self.Menu_File_Open.setObjectName(_fromUtf8("Menu_File_Open"))
        self.Menu_File_Save = QtWidgets.QMenu(self.Menu_File)
        self.Menu_File_Save.setObjectName(_fromUtf8("Menu_File_Save"))
        self.Menu_Commands = QtWidgets.QMenu(self.menubar)
        self.Menu_Commands.setObjectName(_fromUtf8("Menu_Commands"))
        self.Menu_Commands_Tables = QtWidgets.QMenu(self.Menu_Commands)
        self.Menu_Commands_Tables.setObjectName(_fromUtf8("Menu_Commands_Tables"))
        self.Menu_Commands_GeoLayers = QtWidgets.QMenu(self.Menu_Commands)
        self.Menu_Commands_GeoLayers.setObjectName(_fromUtf8("Menu_Commands_GeoLayers"))
        self.Commands_GeoLayers_Read_2 = QtWidgets.QMenu(self.Menu_Commands_GeoLayers)
        self.Commands_GeoLayers_Read_2.setObjectName(_fromUtf8("Commands_GeoLayers_Read_2"))
        self.Menu_Commands_Comments = QtWidgets.QMenu(self.Menu_Commands)
        self.Menu_Commands_Comments.setObjectName(_fromUtf8("Menu_Commands_Comments"))
        self.Menu_Help = QtWidgets.QMenu(self.menubar)
        self.Menu_Help.setObjectName(_fromUtf8("Menu_Help"))
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName(_fromUtf8("statusbar"))
        MainWindow.setStatusBar(self.statusbar)
        self.Menu_Print = QtWidgets.QAction(MainWindow)
        self.Menu_Print.setObjectName(_fromUtf8("Menu_Print"))
        self.Menu_Properties = QtWidgets.QAction(MainWindow)
        self.Menu_Properties.setObjectName(_fromUtf8("Menu_Properties"))
        self.File_SetWorkingDirectory = QtWidgets.QAction(MainWindow)
        self.File_SetWorkingDirectory.setObjectName(_fromUtf8("File_SetWorkingDirectory"))
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName(_fromUtf8("actionExit"))
        self.File_New_CommandFile = QtWidgets.QAction(MainWindow)
        self.File_New_CommandFile.setObjectName(_fromUtf8("File_New_CommandFile"))
        self.File_Open_CommandFile = QtWidgets.QAction(MainWindow)
        self.File_Open_CommandFile.setObjectName(_fromUtf8("File_Open_CommandFile"))
        self.File_Save_Commands = QtWidgets.QAction(MainWindow)
        self.File_Save_Commands.setObjectName(_fromUtf8("File_Save_Commands"))
        self.File_Save_CommandsAs = QtWidgets.QAction(MainWindow)
        self.File_Save_CommandsAs.setObjectName(_fromUtf8("File_Save_CommandsAs"))
        self.actionRead = QtWidgets.QAction(MainWindow)
        self.actionRead.setObjectName(_fromUtf8("actionRead"))
        self.actionWrite = QtWidgets.QAction(MainWindow)
        self.actionWrite.setObjectName(_fromUtf8("actionWrite"))
        self.Commands_Tables_Read = QtWidgets.QAction(MainWindow)
        self.Commands_Tables_Read.setObjectName(_fromUtf8("Commands_Tables_Read"))
        self.Commands_Tables_Process = QtWidgets.QAction(MainWindow)
        self.Commands_Tables_Process.setObjectName(_fromUtf8("Commands_Tables_Process"))
        self.Commands_Tables_Write = QtWidgets.QAction(MainWindow)
        self.Commands_Tables_Write.setObjectName(_fromUtf8("Commands_Tables_Write"))
        self.Commands_GeoLayers_Process = QtWidgets.QAction(MainWindow)
        self.Commands_GeoLayers_Process.setObjectName(_fromUtf8("Commands_GeoLayers_Process"))
        self.Commands_GeoLayers_Write = QtWidgets.QAction(MainWindow)
        self.Commands_GeoLayers_Write.setObjectName(_fromUtf8("Commands_GeoLayers_Write"))
        self.Commands_Comments_Single = QtWidgets.QAction(MainWindow)
        self.Commands_Comments_Single.setObjectName(_fromUtf8("Commands_Comments_Single"))
        self.Commands_Comments_MultipleStart = QtWidgets.QAction(MainWindow)
        self.Commands_Comments_MultipleStart.setObjectName(_fromUtf8("Commands_Comments_MultipleStart"))
        self.Commands_Comments_MultipleEnd = QtWidgets.QAction(MainWindow)
        self.Commands_Comments_MultipleEnd.setObjectName(_fromUtf8("Commands_Comments_MultipleEnd"))
        self.Commands_Comments_DisableTest = QtWidgets.QAction(MainWindow)
        self.Commands_Comments_DisableTest.setObjectName(_fromUtf8("Commands_Comments_DisableTest"))
        self.Commands_Comments_ExpectedStatusFail = QtWidgets.QAction(MainWindow)
        self.Commands_Comments_ExpectedStatusFail.setObjectName(_fromUtf8("Commands_Comments_ExpectedStatusFail"))
        self.Commands_Comments_ExpectedStatusWarn = QtWidgets.QAction(MainWindow)
        self.Commands_Comments_ExpectedStatusWarn.setObjectName(_fromUtf8("Commands_Comments_ExpectedStatusWarn"))
        self.GeoLayers_Read_ReadGeoLayerFromGeoJSON = QtWidgets.QAction(MainWindow)
        self.GeoLayers_Read_ReadGeoLayerFromGeoJSON.setObjectName(_fromUtf8("GeoLayers_Read_ReadGeoLayerFromGeoJSON"))
        self.GeoLayers_Read_ReadGeoLayerFromShapefile = QtWidgets.QAction(MainWindow)
        self.GeoLayers_Read_ReadGeoLayerFromShapefile.setObjectName(
            _fromUtf8("GeoLayers_Read_ReadGeoLayerFromShapefile"))
        self.GeoLayers_Read_ReadGeoLayersFromFGDB = QtWidgets.QAction(MainWindow)
        self.GeoLayers_Read_ReadGeoLayersFromFGDB.setObjectName(_fromUtf8("GeoLayers_Read_ReadGeoLayersFromFGDB"))
        self.GeoLayers_Read_ReadGeoLayersFromFolder = QtWidgets.QAction(MainWindow)
        self.GeoLayers_Read_ReadGeoLayersFromFolder.setObjectName(_fromUtf8("GeoLayers_Read_ReadGeoLayersFromFolder"))
        self.Menu_Help_About = QtWidgets.QAction(MainWindow)
        self.Menu_Help_About.setObjectName(_fromUtf8("Menu_Help_About"))
        self.Help_ViewDocumentation = QtWidgets.QAction(MainWindow)
        self.Help_ViewDocumentation.setObjectName(_fromUtf8("Help_ViewDocumentation"))
        self.Menu_File_New.addAction(self.File_New_CommandFile)
        self.Menu_File_Open.addAction(self.File_Open_CommandFile)
        self.Menu_File_Save.addAction(self.File_Save_Commands)
        self.Menu_File_Save.addAction(self.File_Save_CommandsAs)
        self.Menu_File.addAction(self.Menu_File_New.menuAction())
        self.Menu_File.addAction(self.Menu_File_Open.menuAction())
        self.Menu_File.addAction(self.Menu_File_Save.menuAction())
        self.Menu_File.addAction(self.Menu_Print)
        self.Menu_File.addSeparator()
        self.Menu_File.addAction(self.Menu_Properties)
        self.Menu_File.addSeparator()
        self.Menu_File.addAction(self.File_SetWorkingDirectory)
        self.Menu_File.addSeparator()
        self.Menu_File.addAction(self.actionExit)
        self.Menu_Commands_Tables.addAction(self.Commands_Tables_Read)
        self.Menu_Commands_Tables.addAction(self.Commands_Tables_Process)
        self.Menu_Commands_Tables.addAction(self.Commands_Tables_Write)
        self.Commands_GeoLayers_Read_2.addAction(self.GeoLayers_Read_ReadGeoLayerFromGeoJSON)
        self.Commands_GeoLayers_Read_2.addAction(self.GeoLayers_Read_ReadGeoLayerFromShapefile)
        self.Commands_GeoLayers_Read_2.addAction(self.GeoLayers_Read_ReadGeoLayersFromFGDB)
        self.Commands_GeoLayers_Read_2.addAction(self.GeoLayers_Read_ReadGeoLayersFromFolder)
        self.Menu_Commands_GeoLayers.addAction(self.Commands_GeoLayers_Read_2.menuAction())
        self.Menu_Commands_GeoLayers.addAction(self.Commands_GeoLayers_Process)
        self.Menu_Commands_GeoLayers.addAction(self.Commands_GeoLayers_Write)
        self.Menu_Commands_Comments.addAction(self.Commands_Comments_Single)
        self.Menu_Commands_Comments.addAction(self.Commands_Comments_MultipleStart)
        self.Menu_Commands_Comments.addAction(self.Commands_Comments_MultipleEnd)
        self.Menu_Commands_Comments.addSeparator()
        self.Menu_Commands_Comments.addAction(self.Commands_Comments_DisableTest)
        self.Menu_Commands_Comments.addAction(self.Commands_Comments_ExpectedStatusFail)
        self.Menu_Commands_Comments.addAction(self.Commands_Comments_ExpectedStatusWarn)
        self.Menu_Commands.addAction(self.Menu_Commands_GeoLayers.menuAction())
        self.Menu_Commands.addAction(self.Menu_Commands_Tables.menuAction())
        self.Menu_Commands.addSeparator()
        self.Menu_Commands.addAction(self.Menu_Commands_Comments.menuAction())

        self.Menu_Help.addAction(self.Menu_Help_About)
        self.Menu_Help.addAction(self.Help_ViewDocumentation)
        self.menubar.addAction(self.Menu_File.menuAction())
        self.menubar.addAction(self.Menu_Commands.menuAction())
        self.menubar.addAction(self.Menu_Help.menuAction())
        # Used to be in retranslateUi
        self.Menu_File.setTitle("File")
        self.Menu_File_New.setTitle("New")
        self.Menu_File_Open.setTitle("Open")
        self.Menu_File_Save.setTitle("Save")
        self.Menu_Commands.setTitle("Commands")
        self.Menu_Commands_Tables.setTitle("Tables")
        self.Menu_Commands_GeoLayers.setTitle("GeoLayers")
        self.Commands_GeoLayers_Read_2.setTitle("Read")
        self.Menu_Commands_Comments.setTitle("General - Comments")
        self.Menu_Help.setTitle("Help")
        self.Menu_Print.setText("Print")
        self.Menu_Properties.setText("Properties")
        self.File_SetWorkingDirectory.setText("Set Working Directory ...")
        self.actionExit.setText("Exit")
        self.File_New_CommandFile.setText("Command File")
        self.File_Open_CommandFile.setText("Command File ...")
        self.File_Save_Commands.setText("Commands ...")
        self.File_Save_CommandsAs.setText("Commands as ...")
        self.actionRead.setText("Read")
        self.actionWrite.setText("Write")
        self.Commands_Tables_Read.setText("Read")
        self.Commands_Tables_Process.setText("Process")
        self.Commands_Tables_Write.setText("Write")
        self.Commands_GeoLayers_Process.setText("Process")
        self.Commands_GeoLayers_Write.setText("Write")
        self.Commands_Comments_Single.setText("# comments <enter 1+ comments each starting with #>")
        self.Commands_Comments_MultipleStart.setText("/* <start multi-line comment section> ")
        self.Commands_Comments_MultipleEnd.setText("*/ <end multi-line comment section>")
        self.Commands_Comments_DisableTest.setText("#@enabled False <disables the test>")
        self.Commands_Comments_ExpectedStatusFail.setText("#@expectedStatus Failure <used to test commands>")
        self.Commands_Comments_ExpectedStatusWarn.setText("#@expectedStatus Warning <used to test commands>")
        self.GeoLayers_Read_ReadGeoLayerFromGeoJSON.setText(
            "ReadGeoLayerFromGeoJSON <reads a GeoLayer from a .geojson file>")
        self.GeoLayers_Read_ReadGeoLayerFromShapefile.setText(
            "ReadGeoLayerFromShapefile <reads a GeoLayer from a shapefile>")
        self.GeoLayers_Read_ReadGeoLayersFromFGDB.setText(
            "ReadGeoLayersFromFGDB <reads 1+ GeoLayer(s) from the feature classes of a file geodatabase>")
        self.GeoLayers_Read_ReadGeoLayersFromFolder.setText(
            "ReadGeoLayersFromFolder <reads 1+ GeoLayer(s) from a local folder>")
        self.Menu_Help_About.setText("About GeoProcessor")
        self.Help_ViewDocumentation.setText("View Documentation")

        # Define event handlers
        # Connect the File > Open > Command File menu tab.
        self.File_Open_CommandFile.triggered.connect(self.open_command_file)
        # Connect the File > Save > Commands menu tab.
        self.File_Save_Commands.triggered.connect(self.save_commands)
        # Connect the File > Save > Commands As menu tab.
        self.File_Save_CommandsAs.triggered.connect(self.save_commands_as)
        # Connect the File > Set Working Directory menu tab.
        self.File_SetWorkingDirectory.triggered.connect(self.set_working_directory)
        # Connect the Commands > GeoLayers > Read > ReadGeoLayerFromGeoJSON menu tab.
        self.GeoLayers_Read_ReadGeoLayerFromGeoJSON.triggered.connect(
            functools.partial(self.new_command_editor, "ReadGeoLayerFromGeoJSON"))

        # Connect the Help > View Documentation menu tab.
        self.Help_ViewDocumentation.triggered.connect(self.view_documentation)

    def setupUiResults(self, y_centralwidget):
        """
        Set up the Results area of the UI.

        Args:
            y_centralwidget:  Row position in the central widget to add this component.

        Returns:  None
        """
        # Results area is in the bottom of the central widget
        # - Use Tab widget with vertical layout
        # - Alphabetize the tabs
        self.results_GroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.results_GroupBox.setTitle("Results")
        self.results_GroupBox.setObjectName(_fromUtf8("results_GroupBox"))
        self.results_VerticalLayout = QtWidgets.QVBoxLayout(self.results_GroupBox)
        self.results_VerticalLayout.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.results_VerticalLayout.setObjectName(_fromUtf8("verticalLayout"))
        self.results_TabWidget = QtWidgets.QTabWidget(self.results_GroupBox)
        self.results_TabWidget.setObjectName(_fromUtf8("results_TabWidget"))

        # Results GeoLayers tab
        # - Contains a table of GeoLayer
        self.results_GeoLayers_Tab = QtWidgets.QWidget()
        self.results_GeoLayers_Tab.setAcceptDrops(False)
        self.results_GeoLayers_Tab.setObjectName(_fromUtf8("results_GeoLayers_Tab"))
        self.results_GeoLayers_VerticalLayout = QtWidgets.QVBoxLayout(self.results_GeoLayers_Tab)
        self.results_GeoLayers_VerticalLayout.setObjectName(_fromUtf8("results_GeoLayers_VerticalLayout"))
        self.results_GeoLayers_GroupBox = QtWidgets.QGroupBox(self.results_GeoLayers_Tab)
        self.results_GeoLayers_GroupBox.setObjectName(_fromUtf8("results_GeoLayers_GroupBox"))
        self.results_GeoLayers_GroupBox_VerticalLayout = QtWidgets.QVBoxLayout(self.results_GeoLayers_GroupBox)
        self.results_GeoLayers_GroupBox_VerticalLayout.setObjectName(_fromUtf8("results_GeoLayers_GroupBox_VerticalLayout"))
        self.results_GeoLayers_Table = QtWidgets.QTableWidget(self.results_GeoLayers_GroupBox)
        self.results_GeoLayers_Table.setObjectName(_fromUtf8("results_GeoLayers_Table"))
        self.results_GeoLayers_Table.setColumnCount(5)
        self.results_GeoLayers_Table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.results_GeoLayers_Table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_GeoLayers_Table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_GeoLayers_Table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_GeoLayers_Table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_GeoLayers_Table.setHorizontalHeaderItem(4, item)
        self.results_GeoLayers_Table.horizontalHeader().setCascadingSectionResizes(False)
        self.results_GeoLayers_Table.horizontalHeader().setDefaultSectionSize(200)
        self.results_GeoLayers_Table.horizontalHeader().setSortIndicatorShown(True)
        self.results_GeoLayers_Table.horizontalHeader().setStretchLastSection(True)
        self.results_GeoLayers_GroupBox_VerticalLayout.addWidget(self.results_GeoLayers_Table)
        self.results_GeoLayers_VerticalLayout.addWidget(self.results_GeoLayers_GroupBox)
        self.results_TabWidget.addTab(self.results_GeoLayers_Tab, _fromUtf8(""))
        # Used to be in retranslateUi
        self.results_GeoLayers_GroupBox.setTitle("GeoLayers (0 GeoLayers, 0 selected)")
        self.results_GeoLayers_Table.horizontalHeaderItem(0).setText("GeoLayer ID")
        self.results_GeoLayers_Table.horizontalHeaderItem(1).setText("Geometry")
        self.results_GeoLayers_Table.horizontalHeaderItem(2).setText("Feature Count")
        self.results_GeoLayers_Table.horizontalHeaderItem(3).setText("Coordinate Reference System")
        self.results_GeoLayers_Table.horizontalHeaderItem(4).setText("Command Reference")
        self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_GeoLayers_Tab),"GeoLayers")

        # Results - Maps tab
        self.results_Maps_Tab = QtWidgets.QWidget()
        self.results_Maps_Tab.setObjectName(_fromUtf8("results_Maps_Tab"))
        self.results_Maps_VerticalLayout = QtWidgets.QVBoxLayout(self.results_Maps_Tab)
        self.results_Maps_VerticalLayout.setObjectName(_fromUtf8("results_Maps_VerticalLayout"))
        self.results_Maps_GroupBox = QtWidgets.QGroupBox(self.results_Maps_Tab)
        self.results_Maps_GroupBox.setObjectName(_fromUtf8("results_Maps_GroupBox"))
        self.results_Maps_GroupBox_VerticalLayout = QtWidgets.QVBoxLayout(self.results_Maps_GroupBox)
        self.results_Maps_GroupBox_VerticalLayout.setObjectName(_fromUtf8("results_Maps_GroupBox_VerticalLayout"))
        self.results_Maps_Table = QtWidgets.QTableWidget(self.results_Maps_GroupBox)
        self.results_Maps_Table.setObjectName(_fromUtf8("results_Maps_Table"))
        self.results_Maps_Table.setColumnCount(4)
        self.results_Maps_Table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.results_Maps_Table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Maps_Table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Maps_Table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Maps_Table.setHorizontalHeaderItem(3, item)
        self.results_Maps_Table.horizontalHeader().setDefaultSectionSize(175)
        self.results_Maps_Table.horizontalHeader().setStretchLastSection(True)
        self.results_Maps_GroupBox_VerticalLayout.addWidget(self.results_Maps_Table)
        self.results_Maps_VerticalLayout.addWidget(self.results_Maps_GroupBox)
        self.results_TabWidget.addTab(self.results_Maps_Tab, _fromUtf8(""))
        # Used to be in retranslateUi
        self.results_Maps_GroupBox.setTitle("Maps (0 Maps, 0 selected)")
        self.results_Maps_Table.horizontalHeaderItem(0).setText("Map ID")
        self.results_Maps_Table.horizontalHeaderItem(1).setText("Included GeoLayers")
        self.results_Maps_Table.horizontalHeaderItem(2).setText("Coordinate Reference System")
        self.results_Maps_Table.horizontalHeaderItem(3).setText("Command Reference")
        self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_Maps_Tab),"Maps")

        # Results - Output Files tab
        self.results_OutputFiles_Tab = QtWidgets.QWidget()
        self.results_OutputFiles_Tab.setObjectName(_fromUtf8("results_OutputFiles_Tab"))
        self.results_OutputFiles_VerticalLayout = QtWidgets.QVBoxLayout(self.results_OutputFiles_Tab)
        self.results_OutputFiles_VerticalLayout.setObjectName(_fromUtf8("results_OutputFiles_VerticalLayout"))
        self.results_OutputFiles_GroupBox = QtWidgets.QGroupBox(self.results_OutputFiles_Tab)
        self.results_OutputFiles_GroupBox.setObjectName(_fromUtf8("results_OutputFiles_GroupBox"))
        self.results_OutputFiles_GroupBox_VerticalLayout = QtWidgets.QVBoxLayout(self.results_OutputFiles_GroupBox)
        self.results_OutputFiles_GroupBox_VerticalLayout.setObjectName(_fromUtf8("results_OutputFiles_GroupBox_VerticalLayout"))
        self.results_OutputFiles_Table = QtWidgets.QTableWidget(self.results_OutputFiles_GroupBox)
        self.results_OutputFiles_Table.setObjectName(_fromUtf8("results_OutputFiles_Table"))
        self.results_OutputFiles_Table.setColumnCount(3)
        self.results_OutputFiles_Table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.results_OutputFiles_Table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_OutputFiles_Table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_OutputFiles_Table.setHorizontalHeaderItem(2, item)
        self.results_OutputFiles_Table.horizontalHeader().setDefaultSectionSize(150)
        self.results_OutputFiles_Table.horizontalHeader().setStretchLastSection(True)
        self.results_OutputFiles_GroupBox_VerticalLayout.addWidget(self.results_OutputFiles_Table)
        self.results_OutputFiles_VerticalLayout.addWidget(self.results_OutputFiles_GroupBox)
        self.results_TabWidget.addTab(self.results_OutputFiles_Tab, _fromUtf8(""))
        # Used to be in retranslateUi
        self.results_OutputFiles_GroupBox.setTitle("Output Files (0 Output Files, 0 selected)")
        self.results_OutputFiles_Table.horizontalHeaderItem(0).setText("Output File ")
        self.results_OutputFiles_Table.horizontalHeaderItem(1).setText("File Type")
        self.results_OutputFiles_Table.horizontalHeaderItem(2).setText("Command Reference")
        self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_OutputFiles_Tab), "Output Files")

        # Results - Properties tab
        self.results_Properties_Tab = QtWidgets.QWidget()
        self.results_Properties_Tab.setObjectName(_fromUtf8("results_Properties_Tab"))
        self.results_Properties_Tab_VerticalLayout = QtWidgets.QVBoxLayout(self.results_Properties_Tab)
        self.results_Properties_Tab_VerticalLayout.setObjectName(_fromUtf8("results_Properties_Tab_VerticalLayout"))
        self.results_Properties_GroupBox = QtWidgets.QGroupBox(self.results_Properties_Tab)
        self.results_Properties_GroupBox.setObjectName(_fromUtf8("results_Properties_GroupBox"))
        self.results_Properties_GroupBox_VerticalLayout = QtWidgets.QVBoxLayout(self.results_Properties_GroupBox)
        self.results_Properties_GroupBox_VerticalLayout.setObjectName(_fromUtf8("results_Properties_GroupBox_VerticalLayout"))
        self.results_Properties_Table = QtWidgets.QTableWidget(self.results_Properties_GroupBox)
        self.results_Properties_Table.setAlternatingRowColors(True)
        self.results_Properties_Table.setObjectName(_fromUtf8("results_Properties_Table"))
        self.results_Properties_Table.setColumnCount(2)
        self.results_Properties_Table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.results_Properties_Table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Properties_Table.setHorizontalHeaderItem(1, item)
        self.results_Properties_Table.horizontalHeader().setStretchLastSection(True)
        self.results_Properties_Table.verticalHeader().setStretchLastSection(False)
        self.results_Properties_GroupBox_VerticalLayout.addWidget(self.results_Properties_Table)
        self.results_Properties_Tab_VerticalLayout.addWidget(self.results_Properties_GroupBox)
        self.results_TabWidget.addTab(self.results_Properties_Tab, _fromUtf8(""))
        # Used to be in retranslateUi
        self.results_Properties_GroupBox.setTitle(
            "Processor properties control processing and can be used in some command " +
            "parameters using ${Property} notation (see command documentation). ")
        self.results_Properties_Table.horizontalHeaderItem(0).setText("Property Name")
        self.results_Properties_Table.horizontalHeaderItem(1).setText("Property Value")
        self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_Properties_Tab), "Properties")

        # Results - Tables tab
        self.results_Tables_Tab = QtWidgets.QWidget()
        self.results_Tables_Tab.setObjectName(_fromUtf8("results_Tables_Tab"))
        self.results_Tables_VerticalLayout = QtWidgets.QVBoxLayout(self.results_Tables_Tab)
        self.results_Tables_VerticalLayout.setObjectName(_fromUtf8("results_Tables_VerticalLayout"))
        self.results_Tables_GroupBox = QtWidgets.QGroupBox(self.results_Tables_Tab)
        self.results_Tables_GroupBox.setObjectName(_fromUtf8("results_Tables_GroupBox"))
        self.results_Tables_GroupBox_VerticalLayout = QtWidgets.QVBoxLayout(self.results_Tables_GroupBox)
        self.results_Tables_GroupBox_VerticalLayout.setObjectName(_fromUtf8("results_Tables_GroupBox_VerticalLayout"))
        self.results_Tables_Table = QtWidgets.QTableWidget(self.results_Tables_GroupBox)
        self.results_Tables_Table.setObjectName(_fromUtf8("results_Tables_Table"))
        self.results_Tables_Table.setColumnCount(4)
        self.results_Tables_Table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.results_Tables_Table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Tables_Table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Tables_Table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.results_Tables_Table.setHorizontalHeaderItem(3, item)
        self.results_Tables_Table.horizontalHeader().setDefaultSectionSize(175)
        self.results_Tables_GroupBox_VerticalLayout.addWidget(self.results_Tables_Table)
        self.results_Tables_VerticalLayout.addWidget(self.results_Tables_GroupBox)
        self.results_TabWidget.addTab(self.results_Tables_Tab, _fromUtf8(""))
        # Used to be in retranslateUi
        self.results_Tables_GroupBox.setTitle("Tables (0 Tables, 0 selected)")
        self.results_Tables_Table.horizontalHeaderItem(0).setText("Table ID")
        self.results_Tables_Table.horizontalHeaderItem(1).setText("Column Count")
        self.results_Tables_Table.horizontalHeaderItem(2).setText("Row Count")
        self.results_Tables_Table.horizontalHeaderItem(3).setText("Command Reference")
        self.results_TabWidget.setTabText(self.results_TabWidget.indexOf(self.results_Tables_Tab), "Tables")

        # Add the Results tab to the vertical layout
        self.results_VerticalLayout.addWidget(self.results_TabWidget)
        # Now add the Results to the central widget
        self.centralwidget_GridLayout.addWidget(self.results_GroupBox, y_centralwidget, 0, 1, 6)
        # Set the visible tab to the GeoLayers
        self.results_TabWidget.setCurrentIndex(0)

        # Set up event handlers

        # Listen for a change in item selection within the results_GeoLayers_Table widget.
        self.results_GeoLayers_Table.itemSelectionChanged.connect(self.update_results_count)
        # Listen for a change in item selection within the results_Tables_Table widget.
        self.results_Tables_Table.itemSelectionChanged.connect(self.update_results_count)
        # Listen for a change in item selection within the results_Maps_Table widget.
        self.results_Maps_Table.itemSelectionChanged.connect(self.update_results_count)
        # Listen for a change in item selection within the results_OutputFiles_Table widget.
        self.results_OutputFiles_Table.itemSelectionChanged.connect(self.update_results_count)

    def setupUiStatus(self, y_centralwidget):
        """
        Set up the Status area of the UI.

        Args:
            y_centralwidget:  Row position in the central widget to add this component.

        Returns:  None
        """
        # Command status in footer of the window - currently uses a general Widget area
        self.status_Widget = QtWidgets.QWidget(self.centralwidget)
        self.status_GridLayout = QtWidgets.QGridLayout(self.status_Widget)
        y_status = -1
        self.status_CurrentCommand_Label = QtWidgets.QLabel(self.status_Widget)
        self.status_CurrentCommand_Label.setObjectName(_fromUtf8("status_CurrentCommand_Label"))
        y_status = y_status + 1
        self.status_GridLayout.addWidget(self.status_CurrentCommand_Label, y_status, 3, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.status_Command_Workflow_status_Label = QtWidgets.QLabel(self.status_Widget)
        self.status_Command_Workflow_status_Label.setObjectName(_fromUtf8("status_Command_Workflow_status_Label"))
        self.status_GridLayout.addWidget(self.status_Command_Workflow_status_Label, y_status, 4, 1, 1)
        self.status_Label = QtWidgets.QLabel(self.status_Widget)
        self.status_Label.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.status_Label.setFrameShadow(QtWidgets.QFrame.Plain)
        self.status_Label.setLineWidth(2)
        self.status_Label.setObjectName(_fromUtf8("status_Label"))
        self.status_GridLayout.addWidget(self.status_Label, y_status, 5, 1, 1)
        y_status = y_status + 1
        self.status_GridLayout.addItem(spacerItem1, y_status, 1, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.status_GridLayout.addItem(spacerItem2, y_status, 2, 1, 1)
        self.status_CommandWorkflow_StatusBar = QtWidgets.QProgressBar(self.status_Widget)
        self.status_CommandWorkflow_StatusBar.setProperty("value", 0)
        self.status_CommandWorkflow_StatusBar.setInvertedAppearance(False)
        self.status_CommandWorkflow_StatusBar.setObjectName(_fromUtf8("status_CommandWorkflow_StatusBar"))
        self.status_GridLayout.addWidget(self.status_CommandWorkflow_StatusBar, y_status, 4, 1, 1)
        self.status_CurrentCommand_StatusBar = QtWidgets.QProgressBar(self.status_Widget)
        self.status_CurrentCommand_StatusBar.setProperty("value", 0)
        self.status_CurrentCommand_StatusBar.setInvertedAppearance(False)
        self.status_CurrentCommand_StatusBar.setObjectName(_fromUtf8("status_CurrentCommand_StatusBar"))
        self.status_GridLayout.addWidget(self.status_CurrentCommand_StatusBar, y_status, 3, 1, 1)
        # Used to be in restranslateUi
        self.status_CurrentCommand_Label.setText("Current Command Status")
        self.status_Command_Workflow_status_Label.setText("Command Workflow Status")
        self.status_Label.setText("Ready")

        # Add the status component to the central widget
        self.centralwidget_GridLayout.addWidget(self.status_Widget, y_centralwidget, 0, 1, 6)

    def set_working_directory(self):

        # TODO egiles 2018-05-17 Discuss with Steve the mechanics of a working directory and an initial working dir
        pass

    def update_command_count(self):
        """
        Count the number of items (each item is a command string) in the Command_List widget. Update the total_commands
        class variable to the current number of command items in the Command_List widget. Update the selected_commands
        class variable to the current number of selected command items in the Command_List widget. Update the
        Command_List widget label to display the total and selected number of commands within the widget.

        Return: None
        """

        # Count the number of items (each item is a command string) in the Command_List widget.
        self.total_commands = self.commands_List.count()

        # If there is at least one command in the Command_List widget, enable the "Run All Commands" button and the
        # "Clear Commands" button. If not, disable the "Run All Commands" button and the "Clear Commands" button.
        if self.total_commands > 0:
            self.commands_RunAllCommands_PushButton.setEnabled(True)
            self.commands_ClearCommands_PushButton.setEnabled(True)
        else:
            self.commands_RunAllCommands_PushButton.setEnabled(False)
            self.commands_ClearCommands_PushButton.setEnabled(False)

        # Count the number of selected items (each item is a command string) in the Command_List widget.
        self.selected_commands = len(self.commands_List.selectedItems())

        # If there is at least one selected command in the Command_List widget, enable the "Run Selected Commands"
        # button. If not, disable the "Run Selected Commands" button.
        if self.selected_commands > 0:
            self.commands_RunSelectedCommands_PushButton.setEnabled(True)
        else:
            self.commands_RunSelectedCommands_PushButton.setEnabled(False)

        # Update the Command_List widget label to display the total and selected number of commands.
        self.commands_GroupBox.setTitle(
            "Commands ({} commands, {} selected)".format(self.total_commands, self.selected_commands))

    def update_gp_command_list(self, selected=False):
        """
        Updates the GeoProcessor's command list with the existing command strings in the Command_List widget.

        Returns: None
        """

        # An empty list. Will hold the command strings. One item for each existing command within the Command_List
        # widget.
        cmd_string_list = []

        # If the GeoProcessor should be updated with ALL commands, continue.
        if not selected:

            # Iterate over ALL of the items in the Command_List widget.
            for i in range(self.commands_List.count()):

                # Add the item's text (the command string) to the cmd_string_list.
                cmd_string_list.append(self.commands_List.item(i).text())

        # If the GeoProcessor should be updated with the SELECTED commands, continue.
        else:

            # Iterate over the SELECTED items in the Command_List widget.
            for item in list(self.commands_List.selectedItems()):

                # Add the item's text (the command string) to the cmd_string_list.
                cmd_string_list.append(item.text())

        # Read the command strings into GeoProcessor command objects. Pass the objects to the GeoProcessor.
        self.gp.read_ui_command_workflow(cmd_string_list)

    def update_results_count(self):
        """
        Update the labels of the Results' Tables to disply the total number of rows in each table and the total
        number of selected rows in each table.

        Return: None
        """

        # Count the total and selected number of rows within the GeoLayers table. Update the label to reflect counts.
        row_num = str(self.results_GeoLayers_Table.rowCount())
        slct_row_num = str(len(set(index.row() for index in self.results_GeoLayers_Table.selectedIndexes())))
        self.results_GeoLayers_GroupBox.setTitle("GeoLayers ({} GeoLayers, {} selected)".format(row_num, slct_row_num))

        # Count the total and selected number of rows within the Tables table. Update the label to reflect counts.
        row_num = str(self.results_Tables_Table.rowCount())
        slct_row_num = str(len(set(index.row() for index in self.results_Tables_Table.selectedIndexes())))
        self.results_Tables_GroupBox.setTitle("Tables ({} Tables, {} selected)".format(row_num, slct_row_num))

        # Count the total and selected number of rows within the Maps table. Update the label to reflect counts.
        row_num = str(self.results_Maps_Table.rowCount())
        slct_row_num = str(len(set(index.row() for index in self.results_Maps_Table.selectedIndexes())))
        self.results_Maps_GroupBox.setTitle("Maps ({} Maps, {} selected)".format(row_num, slct_row_num))

        # Count the total and selected number of rows within the Output Files table. Update the label to reflect counts.
        row_num = str(self.results_OutputFiles_Table.rowCount())
        slct_row_num = str(len(set(index.row() for index in self.results_OutputFiles_Table.selectedIndexes())))
        self.results_OutputFiles_GroupBox.setTitle("Output Files ({} Output Files, {} selected)".format(row_num,
                                                                                                        slct_row_num))

    def view_documentation(self):
        """
        Opens the GeoProcessor user documentation in the user's default browser.

        Return: None
        """

        # Open the GeoProcessor user documentation in the default browser (new window).
        webbrowser.open_new(self.user_doc_url)
