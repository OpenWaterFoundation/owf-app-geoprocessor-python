#!/bin/sh
(set -o igncr) 2>/dev/null && set -o igncr; # this comment is required
# The above line ensures that the script can be run on Cygwin/Linux even with Windows CRNL
#
# gptest.sh

# Script to run the Open Water Foundation GeoProcessor application, testing framework
# - This is for Python3
# - This script should eventually work for Cygwin, Git Bash (MinGW), and Linux
# - This requires a Python 3 interpreter but does not require QGIS (QGIS uses Python 3.6).
# - Since QGIS is not used, setup is just to start Python with the main module
# - The geoprocessor package is expected to be found in the chosen Python 3 environment,
#   for example in site-packages.

# Might need to handle different operating systems
# cygwinUname=`uname -a | grep -i cygwin`

# Save all the arguments so they can be used as a global argument in the function
# - might be a way to pass to the runProcessor function
allArgs=$@

# Supporting functions

# Determine the operating system that is running the script
# - mainly care whether Cygwin so can gracefully check whether X Windows server is running
checkOperatingSystem()
{
	if [ ! -z "${operatingSystem}" ]; then
		# Have already checked operating system so return
		return
	fi
	operatingSystem="unknown"
	os=`uname | tr [a-z] [A-Z]`
	case "${os}" in
		CYGWIN*)
			operatingSystem="cygwin"
			;;
		LINUX*)
			operatingSystem="linux"
			;;
		MINGW*)
			operatingSystem="mingw"
			;;
	esac
	echo "operatingSystem=$operatingSystem (used to check for Cygwin and filemode compatibility)"
}

# Set the DISPLAY variable needed for X windows
checkXWindowsDisplay() {
	if [ -z "$DISPLAY" ]; then
		# DISPLAY environment variable is not set so set it
		# - assume running X server and program on one computer
		echo "Setting DISPLAY=:0.0 to work with X Windows server"
		export DISPLAY=:0.0
	fi
}

# Check to make sure the X Windows Server is running
# - currently only check on Cygwin since if running on Linux X Windows is usually running
# - if the check is not performed and X Windows server is not running, will probably see:
#   "Could not connect to any X display"
checkXWindowsServer() {
	if [ ${operatingSystem} = "cygwin" ]; then
		# Check for XWin process
		xwinProcess=$(ps | grep -i XWin)
		if [ -z "${xwinProcess}" ]; then
			echo ""
			echo "It appears that the X Windows server is not running on Cygwin."
			xserverPath="/cygdrive/C/ProgramData/Microsoft/Windows/Start Menu/Programs/Cygwin-X/XWin Server.lnk"
			if [ -f "${xserverPath}" ]; then
				# Windows shortcut exists in the normal location.
				# Run it to start the X Windows server
				echo "Starting X Windows server by running:"
				echo "  cygstart ${xserverPath}"
				# See the following about running a Windows shortcut from Cygwin:
				# https://superuser.com/questions/790128/cygwin-to-execute-windows-shortcut-files-lnk
				cygstart "${xserverPath}"
				# Have to wait a bit for the X Windows server to start
				# - Loop for 10 seconds and if that is not enough continue and see what happens
				startSeconds=$(date +%s)
				while [ "1" = "1" ]; do
					# Sleep 1 second to give X Windows server time to start
					sleep 1
					# See if the X Windows server process is found
					xwinProcess=$(ps | grep -i XWin)
					if [ ! -z "${xwinProcess}" ]; then
						# X Windows server process is found
						break
					else
						# See if 10 seconds has passed and if so break, assuming process won't start
						nowSeconds=$(date +%s)
						timediff=$(expr $nowSeconds - $startSeconds)
						if [ "${timediff}" -gt "10" ]; then
							break
						fi
					fi
				done
				echo "If still get errors, try starting manually with Start / Cygwin-X / XWin Server"
			else
				echo "Cannot determine how to automatically start the X Windows Server"
				echo "If get an error running GeoProcessor, try starting X Windows server manually with Start / Cygwin-X / XWin Server"
			fi
		fi
	fi
}

# Parse command line
# - only handle some specific checks for local logic and let the called script handle command line
parseCommandLineLong() {
	for arg in $@ :; do
		if [ "$arg" = "--ui" ]; then
			# Make sure that X Window environment is set up before calling Python UI program
			# Determine the operating system
			checkOperatingSystem
			# Check the X Windows DISPLAY environment variable
			checkXWindowsDisplay
			# Check X Server
			checkXWindowsServer
		fi
	done
}

# Function to run Python version 3
runProcessor () {
	# python3 can be used for Python 3.
        # Version is printed to stderr or stdout so a bit tricker to redirect
	pythonExe="python3"
        # First try the general Python launcher
        pythonVersion=`${pythonExe} --version 2>&1 | cut -d ' ' -f 2 | cut -d . -f 1`
        if [ "${pythonVersion}" = "3" ]
		then
		# Python 3 version was found
		# - run geoprocessor/app/gp.py
		# - Expect that the geoprocessor folder is found under site-packages or
		#   other PYTHONPATH location
		#export PYTHONPATH="$PYTHONPATH:$OSGEO4W_ROOT/apps/qgis/python"
		#export PYTHONPATH="$PYTHONPATH:$OSGEO4W_ROOT/apps/qgis/python/plugins"
		#export PYTHONPATH="$PYTHONPATH:$OSGEO4W_ROOT/apps/Python27/Lib/site-packages"
		echo ""
		echo "Running the geoprocessor for Python3..."
		${pythonExe} -m geoprocessor.app.gp ${allArgs}
	else
		# Python 3 version was not found
                echo ""
                echo "Cannot determine available python 2 available to run processor."
                exit 1
        fi
}

# Main entry point into script

# Parse the command parameters
parseCommandLineLong "$@"

# Run the processor
runProcessor
exit 0
