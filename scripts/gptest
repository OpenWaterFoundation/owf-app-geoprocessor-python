#!/bin/sh
(set -o igncr) 2>/dev/null && set -o igncr; # this comment is required
# The above line ensures that the script can be run on Cygwin/Linux even with Windows CRNL
#
# gptest.sh
#_________________________________________________________________NoticeStart_
# GeoProcessor
# Copyright (C) 2017-2020 Open Water Foundation
# 
# GeoProcessor is free software:  you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
# 
#     GeoProcessor is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
# 
#     You should have received a copy of the GNU General Public License
#     along with GeoProcessor.  If not, see <https://www.gnu.org/licenses/>.
#_________________________________________________________________NoticeEnd___
#
# Script to run the Open Water Foundation GeoProcessor application, testing framework
# - This is for Python3
# - This script should eventually work for Cygwin, Git Bash (MinGW), and Linux
# - This requires a Python 3 interpreter but does not require QGIS (QGIS uses Python 3.6).
# - Since QGIS is not used, setup is just to start Python with the main module
# - The geoprocessor package is expected to be found in the chosen Python 3 environment,
#   for example in site-packages.

# Might need to handle different operating systems
# cygwinUname=`uname -a | grep -i cygwin`

# Save all the arguments so they can be used as a global argument in the function
# - the command line is parsed in this script to check --ui and --python
#   but otherwise all arguments are passed to the Python gp.py
allArgs=$@

# Supporting functions

# Determine the operating system that is running the script
# - mainly care whether Cygwin so can gracefully check whether X Windows server is running
checkOperatingSystem()
{
	if [ ! -z "${operatingSystem}" ]; then
		# Have already checked operating system so return
		return
	fi
	operatingSystem="unknown"
	os=`uname | tr [a-z] [A-Z]`
	case "${os}" in
		CYGWIN*)
			operatingSystem="cygwin"
			;;
		LINUX*)
			operatingSystem="linux"
			;;
		MINGW*)
			operatingSystem="mingw"
			;;
	esac
	echo "operatingSystem=$operatingSystem"
}

# Check for and if necessary activate Python virtual environment
# - if running in the development environment no changes are made
# - if running in deployed environment the venv is activated if not already
# - if the virtual environment has not be activate in the calling shell,
#   it will be activated every time this script is run
checkPythonVirtualEnv() {
	echo "Checking for whether Python virtual environment (venv) needs to be activated..."
	# First determine if running in a venv
	# - look for venv folders bin, include, lib, scripts
	# - development environment has geoprocessor and scripts folder
	parentFolder=$(dirname $scriptFolder)
	binFolder=$parentFolder/bin
	includeFolder=$parentFolder/include
	libFolder=$parentFolder/lib
	scriptsFolder=$parentFolder/scripts
	if [ -d "$binFolder" -a -d "$includeFolder" -a -d "$libFolder" -a -d "$scriptsFolder" ]; then
		# Probably running in virtual environment
		# Make sure the environment is activated
		echo "Appear to be running in venv"
		if [ "$VIRTUAL_ENV" = "" ]; then
			echo "VIRTUAL_ENV is not set.  Activating the venv."
			# Use "." below rather than "source" because "source" is not always available
			. "$binFolder/activate"
		else
			echo "VIRTUAL_ENV is set.  Assuming the venv is already activated."
		fi
		# After activation, also check that the value of VIRTUAL_ENV is the same
		# as the parent of the scripts folder.
		# - if not, the user may have renamed the installation folder and the venv will not work
		# - have to get the value of VIRTUAL_ENV from the script code rather than from environment
		#   because "activate" will not complete
		venvFolder=$(dirname $scriptFolder)
		activateFile="$venvFolder/bin/activate"
		VIRTUAL_ENV_value=$(cat $activateFile | grep 'VIRTUAL_ENV=' | cut -d '=' -f 2 | tr -d '"')
		if [ "$VIRTUAL_ENV_value" != "$venvFolder" ]; then
			echo ""
			echo "VIRTUAL_ENV value ($VIRTUAL_ENV_value) in activate script"
			echo "is not the same as scripts parent folder ($venvFolder)".
			echo "The virtual environment folder may have been moved after installing."
			echo "The GeoProcessor virtual environment won't work."
			echo "Reinstall and don't move the installed folder."
			echo "Exiting."
			exit 1
		fi
	else
		echo "Appear to be running outside of venv.  Not activating the venv."
	fi
}

# Set the DISPLAY variable needed for X windows
checkXWindowsDisplay() {
	if [ -z "$DISPLAY" ]; then
		# DISPLAY environment variable is not set so set it
		# - assume running X server and program on one computer
		echo "Setting DISPLAY=:0.0 to work with X Windows server."
		export DISPLAY=:0.0
	else
		# DISPLAY already set
		echo "Using DISPLAY=$DISPLAY for X Windows server."
	fi
}

# Check to make sure the X Windows Server is running
# - currently only check on Cygwin since if running on Linux X Windows is usually running
# - if the check is not performed and X Windows server is not running, will probably see:
#   "Could not connect to any X display"
checkXWindowsServer() {
	if [ ${operatingSystem} = "cygwin" ]; then
		# Check for XWin process
		xwinProcess=$(ps | grep -i XWin)
		if [ -z "${xwinProcess}" ]; then
			echo ""
			echo "It appears that the X Windows server is not running on Cygwin."
			xserverPath="/cygdrive/C/ProgramData/Microsoft/Windows/Start Menu/Programs/Cygwin-X/XWin Server.lnk"
			if [ -f "${xserverPath}" ]; then
				# Windows shortcut exists in the normal location.
				# Run it to start the X Windows server
				echo "Starting X Windows server by running:"
				echo "  cygstart ${xserverPath}"
				# See the following about running a Windows shortcut from Cygwin:
				# https://superuser.com/questions/790128/cygwin-to-execute-windows-shortcut-files-lnk
				cygstart "${xserverPath}"
				# Have to wait a bit for the X Windows server to start
				# - Loop for 10 seconds and if that is not enough continue and see what happens
				startSeconds=$(date +%s)
				while [ "1" = "1" ]; do
					# Sleep 1 second to give X Windows server time to start
					sleep 1
					# See if the X Windows server process is found
					xwinProcess=$(ps | grep -i XWin)
					if [ ! -z "${xwinProcess}" ]; then
						# X Windows server process is found
						break
					else
						# See if 10 seconds has passed and if so break, assuming process won't start
						nowSeconds=$(date +%s)
						timediff=$(expr $nowSeconds - $startSeconds)
						if [ "${timediff}" -gt "10" ]; then
							break
						fi
					fi
				done
				echo "If still get errors, try starting manually with Start / Cygwin-X / XWin Server"
			else
				echo "Cannot determine how to automatically start the X Windows Server"
				echo "If get an error running GeoProcessor, try starting X Windows server manually with Start / Cygwin-X / XWin Server"
			fi
		fi
	fi
}

# Parse the command line and set variables to control logic
# - all the original command line options are passed to Python when running in normal mode
# - additionally, --ui is detected and additional environment set up for X Windows and Python virtual environment
# - if --python is specified, then the Python interpreter is started without launching the GeoProcessor
parseCommandLine() {
    # Indicate specification for single character options
    # - 1 colon after an option indicates that an argument is required
    # - 2 colons after an option indicates that an argument is optional, must use -o=argument syntax
    optstring="c:hp:v"
    # Indicate specification for long options
    # - 1 colon after an option indicates that an argument is required
    # - 2 colons after an option indicates that an argument is optional, must use --option=argument syntax
    optstringLong="commands:,http,python,ui,version"
    # Parse the options using getopt command
    # - the -- is a separator between getopt options and parameters to be parsed
    # - output is simple space-delimited command line
    # - error message will be printed if unrecognized option or missing parameter but status will be 0
    # - if an optional argument is not specified, output will include empty string ''
    GETOPT_OUT=$(getopt --options $optstring --longoptions $optstringLong -- "$@")
    exitCode=$?
    if [ $exitCode -ne 0 ]; then
        echo ""
        printUsage
        exit 1
    fi
    # The following constructs the command by concatenating arguments
    # - the $1, $2, etc. variables are set as if typed on the command line
    # - special cases like --option=value and missing optional arguments are generically handled
    #   as separate parameters so shift can be done below
    eval set -- "$GETOPT_OUT"
    # Loop over the options
    # - include all options recognized by gp.py so that getopt does not complain
    # - the error handling will catch cases were argument is missing
    # - shift over the known number of options/arguments
    while true; do
        #echo "Command line option is $opt"
        case "$1" in
            -h) # -h  Ignore since Python program will use
                shift 1
                ;;
            --python) # --python  Run Python interpreter without running GeoProcessor
                runMode="python"
                shift 1
                ;;
            --ui) # --ui  Print the version
                # Setup the environment
                runMode="ui"
                setupUiEnvironment
                shift 1
                ;;
            -v) # -h  Ignore since Python program will use
                shift 1
                ;;
            --) # No more arguments
                shift
                break
                ;;
            *) # Unknown option - OK because will pass to the Python gp.py program, which will handle
                #echo ""
                #echo "Invalid option $1." >&2
                #printUsage
                #exit 1
                ;;
        esac
    done
}

# Function to run Python version 3
runProcessor () {
	# python3 can be used for Python 3.
	# Version is printed to stderr or stdout so a bit tricker to redirect
	pythonExe="python3"
	# First try the general Python launcher
	pythonVersion=`${pythonExe} --version 2>&1 | cut -d ' ' -f 2 | cut -d . -f 1`
	if [ "${pythonVersion}" = "3" ]
		then
		# Python 3 version was found
		# - run geoprocessor/app/gp.py
		# - Expect that the geoprocessor folder is found under site-packages or
		#   other PYTHONPATH location
		#export PYTHONPATH="$PYTHONPATH:$OSGEO4W_ROOT/apps/qgis/python"
		#export PYTHONPATH="$PYTHONPATH:$OSGEO4W_ROOT/apps/qgis/python/plugins"
		#export PYTHONPATH="$PYTHONPATH:$OSGEO4W_ROOT/apps/Python27/Lib/site-packages"
		if [ "$runMode" = "python" ]; then
			echo ""
			echo "Running python3 using GeoProcessor environment"
			echo "Will need to import modules at the Python interpreter prompt."
			${pythonExe}
		else
			echo ""
			echo "Running the GeoProcessor for Python3..."
			${pythonExe} -m geoprocessor.app.gp ${allArgs}
		fi
	else
		# Python 3 version was not found
		echo ""
		echo "Cannot determine available python 3 available to run processor."
		exit 1
	fi
}

# Set up the UI environment
setupUiEnvironment() {
	# Make sure that X Window environment is set up before calling Python UI program
	# Determine the operating system
	checkOperatingSystem
	# Check the X Windows DISPLAY environment variable
	checkXWindowsDisplay
	# Check X Server
	checkXWindowsServer
}

# Main entry point into script

# Get the folder where this script is located since it may have been run from any folder
scriptFolder=`cd $(dirname "$0") && pwd`

# Run mode is mainly used to handle --python
runMode=""

# Parse the command parameters
parseCommandLine "$@"

# Setup the virtual environment (venv) if necessary
# - this script can be run from development environment or deployed venv
checkPythonVirtualEnv

# Run the processor
runProcessor
exit 0
